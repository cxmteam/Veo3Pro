import streamlit as st
import streamlit.components.v1 as components
import sqlite3
import json
import os
import time
import hashlib
import uuid
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import pandas as pd
import requests
import random
import io
import base64

# =============================================================================
# IMPORT ALL 7 ADVANCED FEATURES
# =============================================================================

# Import all advanced feature classes
try:
    from ai_assistant_advanced import create_ai_assistant_advanced
    from mobile_app_design import create_mobile_app
    from professional_templates import create_professional_templates
    from monetization_system import create_monetization_system
    from community_marketing import create_community_marketing
    from utility_features import create_utility_features
    from vietnam_targeting import create_vietnam_targeting
    ADVANCED_FEATURES_AVAILABLE = True
except ImportError as e:
    ADVANCED_FEATURES_AVAILABLE = False
    print(f"‚ö†Ô∏è M·ªôt s·ªë t√≠nh nƒÉng n√¢ng cao ch∆∞a s·∫µn s√†ng: {str(e)}")

# =============================================================================
# VEO3 VIETNAMESE ULTIMATE - PHI√äN B·∫¢N TI·∫æNG VI·ªÜT HO√ÄN CH·ªàNH v·ªõi 7 T√çNH NƒÇNG M·ªöI
# =============================================================================

st.set_page_config(
    page_title="üåü Veo3 Studio Chuy√™n Nghi·ªáp",
    page_icon="üåü",
    layout="wide",
    initial_sidebar_state="expanded"
)

# =============================================================================
# CSS SI√äU ƒê·∫∏P - GIAO DI·ªÜN VI·ªÜT NAM - ƒê√É T·ªêI ∆ØU V·ªöI T√çNH NƒÇNG M·ªöI
# =============================================================================

def load_vietnamese_css():
    # ===== PRELOADER & LOADING OPTIMIZATION =====
    st.markdown("""
    <style>
    /* ===== PRELOADER TO PREVENT WHITE FLASH ===== */
    .stApp {
        background: linear-gradient(135deg, 
            #667eea 0%, 
            #764ba2 25%, 
            #f093fb 50%, 
            #f5576c 75%, 
            #4facfe 100%) !important;
        animation: gradientShift 15s ease infinite !important;
        font-family: 'Poppins', sans-serif !important;
        color: #2d3748 !important;
        /* Prevent flash of unstyled content */
        visibility: visible !important;
        opacity: 1 !important;
        transition: opacity 0.3s ease !important;
    }
    
    /* Loading state styling */
    .stSpinner > div {
        border: 4px solid rgba(255, 255, 255, 0.3) !important;
        border-top: 4px solid #667eea !important;
        animation: spin 1s linear infinite !important;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    /* Ensure elements load smoothly */
    .main .block-container {
        background: transparent !important;
        padding: 2rem 1rem !important;
        max-width: 1400px !important;
        margin: 0 auto !important;
        opacity: 1 !important;
        visibility: visible !important;
        transition: all 0.3s ease !important;
    }
    
    /* Faster transitions for page changes */
    .element-container {
        transition: all 0.2s ease !important;
    }
    
    /* Hide elements during initial load to prevent flash */
    body {
        background: linear-gradient(135deg, #667eea, #764ba2, #f093fb) !important;
    }
    </style>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Poppins:wght@300;400;500;600;700;800&family=Orbitron:wght@400;500;600;700;800;900&display=swap');
    
    /* ===== MODERN LUXURY THEME - OPTIMIZED LOADING ===== */
    .stApp {
        background: linear-gradient(135deg, 
            #667eea 0%, 
            #764ba2 25%, 
            #f093fb 50%, 
            #f5576c 75%, 
            #4facfe 100%) !important;
        animation: gradientShift 15s ease infinite !important;
        font-family: 'Poppins', sans-serif !important;
        color: #2d3748 !important;
        /* Prevent flash of unstyled content */
        visibility: visible !important;
        opacity: 1 !important;
        transition: opacity 0.3s ease !important;
    }
    
    @keyframes gradientShift {
        0% { background: linear-gradient(135deg, #667eea 0%, #764ba2 25%, #f093fb 50%, #f5576c 75%, #4facfe 100%); }
        25% { background: linear-gradient(135deg, #4facfe 0%, #00f2fe 25%, #667eea 50%, #764ba2 75%, #f093fb 100%); }
        50% { background: linear-gradient(135deg, #f093fb 0%, #f5576c 25%, #4facfe 50%, #00f2fe 75%, #667eea 100%); }
        75% { background: linear-gradient(135deg, #764ba2 0%, #667eea 25%, #4facfe 50%, #f093fb 75%, #f5576c 100%); }
        100% { background: linear-gradient(135deg, #667eea 0%, #764ba2 25%, #f093fb 50%, #f5576c 75%, #4facfe 100%); }
    }
    
    .main .block-container {
        background: transparent !important;
        padding: 2rem 1rem !important;
        max-width: 1400px !important;
        margin: 0 auto !important;
    }
    
    /* ===== PREMIUM GLASSMORPHISM CARDS ===== */
    .luxury-card {
        background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.25) 0%, 
            rgba(255, 255, 255, 0.18) 100%) !important;
        backdrop-filter: blur(20px) !important;
        -webkit-backdrop-filter: blur(20px) !important;
        border: 1px solid rgba(255, 255, 255, 0.18) !important;
        border-radius: 20px !important;
        padding: 2.5rem !important;
        margin: 1.5rem 0 !important;
        box-shadow: 
            0 8px 32px rgba(31, 38, 135, 0.37),
            inset 0 1px 0 rgba(255, 255, 255, 0.4) !important;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1) !important;
        position: relative !important;
        overflow: hidden !important;
    }
    
    .luxury-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.1) 0%, 
            transparent 50%, 
            rgba(255, 255, 255, 0.1) 100%) !important;
        opacity: 0 !important;
        transition: opacity 0.3s ease !important;
        pointer-events: none !important;
    }
    
    .luxury-card:hover::before {
        opacity: 1 !important;
    }
    
    .luxury-card:hover {
        transform: translateY(-8px) scale(1.02) !important;
        box-shadow: 
            0 20px 60px rgba(31, 38, 135, 0.5),
            inset 0 1px 0 rgba(255, 255, 255, 0.6) !important;
        border-color: rgba(255, 255, 255, 0.4) !important;
    }
    
    /* ===== ELEGANT HEADER ===== */
    .hero-header {
        background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.3) 0%, 
            rgba(255, 255, 255, 0.1) 100%) !important;
        backdrop-filter: blur(30px) !important;
        border: 1px solid rgba(255, 255, 255, 0.2) !important;
        border-radius: 30px !important;
        padding: 4rem 3rem !important;
        text-align: center !important;
        margin-bottom: 3rem !important;
        position: relative !important;
        overflow: hidden !important;
        animation: heroFloat 6s ease-in-out infinite !important;
    }
    
    @keyframes heroFloat {
        0%, 100% { transform: translateY(0px); }
        50% { transform: translateY(-10px); }
    }
    
    .hero-header h1 {
        font-family: 'Orbitron', sans-serif !important;
        font-size: 4rem !important;
        font-weight: 800 !important;
        background: linear-gradient(135deg, #667eea, #764ba2, #f093fb) !important;
        -webkit-background-clip: text !important;
        -webkit-text-fill-color: transparent !important;
        background-clip: text !important;
        margin-bottom: 1rem !important;
        text-shadow: 0 0 30px rgba(102, 126, 234, 0.5) !important;
        animation: textGlow 3s ease-in-out infinite alternate !important;
    }
    
    @keyframes textGlow {
        0% { text-shadow: 0 0 30px rgba(102, 126, 234, 0.5); }
        100% { text-shadow: 0 0 50px rgba(102, 126, 234, 0.8), 0 0 80px rgba(118, 75, 162, 0.6); }
    }
    
    .hero-header p {
        font-size: 1.5rem !important;
        color: #4a5568 !important;
        font-weight: 500 !important;
        opacity: 0.9 !important;
    }
    
    /* ===== MODERN NAVIGATION ===== */
    .nav-container {
        background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.2) 0%, 
            rgba(255, 255, 255, 0.1) 100%) !important;
        backdrop-filter: blur(15px) !important;
        border: 1px solid rgba(255, 255, 255, 0.15) !important;
        border-radius: 20px !important;
        padding: 1.5rem !important;
        margin-bottom: 2rem !important;
    }
    
    .nav-title {
        font-family: 'Orbitron', sans-serif !important;
        font-size: 1.3rem !important;
        font-weight: 600 !important;
        color: #4a5568 !important;
        margin-bottom: 1rem !important;
        text-align: center !important;
    }
    
    /* ===== PREMIUM BUTTONS ===== */
    .stButton > button {
        background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.3) 0%, 
            rgba(255, 255, 255, 0.1) 100%) !important;
        backdrop-filter: blur(10px) !important;
        color: #2d3748 !important;
        border: 1px solid rgba(255, 255, 255, 0.2) !important;
        border-radius: 15px !important;
        padding: 0.8rem 1.5rem !important;
        font-weight: 600 !important;
        font-size: 0.95rem !important;
        font-family: 'Poppins', sans-serif !important;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
        position: relative !important;
        overflow: hidden !important;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1) !important;
        min-height: 50px !important;
        width: 100% !important;
    }
    
    .stButton > button::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, 
            transparent, 
            rgba(255, 255, 255, 0.4), 
            transparent) !important;
        transition: left 0.5s ease !important;
    }
    
    .stButton > button:hover::before {
        left: 100% !important;
    }
    
    .stButton > button:hover {
        transform: translateY(-3px) scale(1.05) !important;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2) !important;
        background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.4) 0%, 
            rgba(255, 255, 255, 0.2) 100%) !important;
        border-color: rgba(255, 255, 255, 0.4) !important;
    }
    
    .stButton > button:active {
        transform: translateY(-1px) scale(1.02) !important;
    }
    
    /* ===== ELEGANT INPUT FIELDS ===== */
    .stTextInput > div > div > input,
    .stTextArea > div > div > textarea {
        background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.9) 0%, 
            rgba(255, 255, 255, 0.7) 100%) !important;
        backdrop-filter: blur(10px) !important;
        color: #2d3748 !important;
        border: 1px solid rgba(255, 255, 255, 0.3) !important;
        border-radius: 15px !important;
        font-weight: 500 !important;
        padding: 1rem !important;
        font-size: 1rem !important;
        font-family: 'Poppins', sans-serif !important;
        box-shadow: 
            0 4px 15px rgba(0, 0, 0, 0.05),
            inset 0 1px 0 rgba(255, 255, 255, 0.6) !important;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
    }
    
    .stTextInput > div > div > input:focus,
    .stTextArea > div > div > textarea:focus {
        border-color: rgba(102, 126, 234, 0.6) !important;
        box-shadow: 
            0 8px 25px rgba(102, 126, 234, 0.15),
            inset 0 1px 0 rgba(255, 255, 255, 0.8) !important;
        transform: translateY(-2px) !important;
        background: rgba(255, 255, 255, 0.95) !important;
    }
    
    .stTextInput > div > div > input::placeholder,
    .stTextArea > div > div > textarea::placeholder {
        color: rgba(45, 55, 72, 0.6) !important;
        font-weight: 400 !important;
    }
    
    /* ===== SELECTBOX MODERN STYLING ===== */
    .stSelectbox > div > div {
        background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.9) 0%, 
            rgba(255, 255, 255, 0.7) 100%) !important;
        backdrop-filter: blur(10px) !important;
        border: 1px solid rgba(255, 255, 255, 0.3) !important;
        border-radius: 15px !important;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05) !important;
        transition: all 0.3s ease !important;
    }
    
    .stSelectbox > div > div:hover {
        border-color: rgba(102, 126, 234, 0.4) !important;
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.1) !important;
        transform: translateY(-2px) !important;
    }
    
    .stSelectbox label {
        color: #4a5568 !important;
        font-weight: 600 !important;
        font-family: 'Poppins', sans-serif !important;
    }
    
    /* ===== FEATURE METRICS ===== */
    .metric-card {
        background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.25) 0%, 
            rgba(255, 255, 255, 0.15) 100%) !important;
        backdrop-filter: blur(15px) !important;
        border: 1px solid rgba(255, 255, 255, 0.18) !important;
        border-radius: 20px !important;
        padding: 2rem !important;
        text-align: center !important;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1) !important;
        position: relative !important;
        overflow: hidden !important;
        min-height: 180px !important;
        display: flex !important;
        flex-direction: column !important;
        justify-content: center !important;
    }
    
    .metric-card::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, #667eea, #764ba2, #f093fb) !important;
        border-radius: 20px 20px 0 0 !important;
    }
    
    .metric-card:hover {
        transform: scale(1.05) rotateY(5deg) !important;
        box-shadow: 0 20px 40px rgba(31, 38, 135, 0.3) !important;
        border-color: rgba(255, 255, 255, 0.3) !important;
    }
    
    .metric-card h2 {
        font-size: 3.5rem !important;
        font-weight: 800 !important;
        font-family: 'Orbitron', sans-serif !important;
        background: linear-gradient(135deg, #667eea, #764ba2) !important;
        -webkit-background-clip: text !important;
        -webkit-text-fill-color: transparent !important;
        margin-bottom: 0.5rem !important;
        animation: numberPulse 2s ease-in-out infinite !important;
    }
    
    @keyframes numberPulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.05); }
    }
    
    .metric-card p {
        color: #4a5568 !important;
        font-weight: 600 !important;
        font-size: 1.1rem !important;
    }
    
    /* ===== ALERT BOXES ===== */
    .stAlert {
        background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.8) 0%, 
            rgba(255, 255, 255, 0.6) 100%) !important;
        backdrop-filter: blur(10px) !important;
        border: 1px solid rgba(255, 255, 255, 0.3) !important;
        border-radius: 15px !important;
        color: #2d3748 !important;
        font-weight: 500 !important;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05) !important;
    }
    
    .stAlert > div {
        color: #2d3748 !important;
        background: transparent !important;
        font-weight: 500 !important;
    }
    
    /* ===== CODE BLOCKS ===== */
    .stCodeBlock,
    .stCodeBlock *,
    code,
    pre {
        background: linear-gradient(135deg, 
            rgba(45, 55, 72, 0.95) 0%, 
            rgba(45, 55, 72, 0.85) 100%) !important;
        color: #e2e8f0 !important;
        border: 1px solid rgba(255, 255, 255, 0.1) !important;
        border-radius: 15px !important;
        padding: 1.5rem !important;
        font-family: 'JetBrains Mono', 'Courier New', monospace !important;
        font-weight: 500 !important;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2) !important;
        backdrop-filter: blur(10px) !important;
    }
    
    /* ===== SCROLLBAR ===== */
    ::-webkit-scrollbar {
        width: 8px;
    }
    
    ::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb {
        background: linear-gradient(135deg, #667eea, #764ba2);
        border-radius: 10px;
        transition: all 0.3s ease;
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(135deg, #764ba2, #f093fb);
    }
    
    /* ===== ANIMATIONS ===== */
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .fade-in {
        animation: fadeInUp 0.6s ease-out !important;
    }
    
    /* ===== RESPONSIVE DESIGN ===== */
    @media (max-width: 768px) {
        .hero-header h1 {
            font-size: 2.5rem !important;
        }
        
        .luxury-card {
            padding: 1.5rem !important;
        }
        
        .metric-card {
            padding: 1.5rem !important;
            min-height: 150px !important;
        }
        
        .metric-card h2 {
            font-size: 2.5rem !important;
        }
    }
    
    /* ===== UTILITY CLASSES ===== */
    .text-gradient {
        background: linear-gradient(135deg, #667eea, #764ba2, #f093fb) !important;
        -webkit-background-clip: text !important;
        -webkit-text-fill-color: transparent !important;
        background-clip: text !important;
    }
    
    .glass-effect {
        background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.25) 0%, 
            rgba(255, 255, 255, 0.15) 100%) !important;
        backdrop-filter: blur(15px) !important;
        border: 1px solid rgba(255, 255, 255, 0.18) !important;
    }
    
    /* ===== CHAT MESSAGES ===== */
    .stChatMessage {
        background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.8) 0%, 
            rgba(255, 255, 255, 0.6) 100%) !important;
        backdrop-filter: blur(10px) !important;
        border: 1px solid rgba(255, 255, 255, 0.3) !important;
        border-radius: 15px !important;
        color: #2d3748 !important;
        font-weight: 500 !important;
        margin: 0.5rem 0 !important;
        padding: 1rem !important;
    }
    
    .stChatMessage * {
        color: #2d3748 !important;
    }
    
    .stChatMessage p {
        color: #2d3748 !important;
        font-weight: 500 !important;
    }
    
    /* ===== SUCCESS/INFO/WARNING/ERROR BOXES - CH·ªÆ ƒêEN ===== */
    .stSuccess,
    .stInfo,
    .stWarning,
    .stError {
        background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.9) 0%, 
            rgba(255, 255, 255, 0.8) 100%) !important;
        backdrop-filter: blur(10px) !important;
        border: 1px solid rgba(255, 255, 255, 0.3) !important;
        border-radius: 15px !important;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05) !important;
    }
    
    .stSuccess > div,
    .stInfo > div,
    .stWarning > div,
    .stError > div {
        color: #2d3748 !important;
        background: transparent !important;
        font-weight: 600 !important;
        font-size: 1rem !important;
    }
    
    .stSuccess * {
        color: #2d3748 !important;
    }
    
    .stInfo * {
        color: #2d3748 !important;
    }
    
    .stWarning * {
        color: #2d3748 !important;
    }
    
    .stError * {
        color: #2d3748 !important;
    }
    
    /* ===== FORCE ALL STREAMLIT ELEMENTS BLACK TEXT ===== */
    [data-testid="stAlert"],
    [data-testid="stAlert"] *,
    [data-testid="stSuccess"],
    [data-testid="stSuccess"] *,
    [data-testid="stInfo"],
    [data-testid="stInfo"] *,
    [data-testid="stWarning"],
    [data-testid="stWarning"] *,
    [data-testid="stError"],
    [data-testid="stError"] *,
    .element-container .stAlert,
    .element-container .stAlert *,
    .element-container .stSuccess,
    .element-container .stSuccess *,
    .element-container .stInfo,
    .element-container .stInfo *,
    .element-container .stWarning,
    .element-container .stWarning *,
    .element-container .stError,
    .element-container .stError * {
        background: rgba(255, 255, 255, 0.95) !important;
        color: #1a202c !important;
        font-weight: 600 !important;
        border-radius: 15px !important;
        border: 1px solid rgba(255, 255, 255, 0.3) !important;
        text-shadow: none !important;
        -webkit-text-fill-color: #1a202c !important;
    }
    
    /* ===== CHAT MESSAGE CONTAINERS ===== */
    [data-testid="chatAvatarIcon-user"],
    [data-testid="chatAvatarIcon-assistant"],
    [data-testid="stChatMessage"],
    [data-testid="stChatMessage"] *,
    .stChatMessage,
    .stChatMessage *,
    div[data-testid*="chat"],
    div[data-testid*="chat"] * {
        background: rgba(255, 255, 255, 0.9) !important;
        color: #1a202c !important;
        font-weight: 500 !important;
        border-radius: 15px !important;
        text-shadow: none !important;
        -webkit-text-fill-color: #1a202c !important;
    }
    
    /* ===== FORCE ALL DIVS WITH WHITE BACKGROUND ===== */
    div[style*="background-color: rgb(255, 255, 255)"],
    div[style*="background-color: white"],
    div[style*="background: rgb(255, 255, 255)"],
    div[style*="background: white"] {
        color: #1a202c !important;
        font-weight: 600 !important;
        text-shadow: none !important;
        -webkit-text-fill-color: #1a202c !important;
    }
    
    div[style*="background-color: rgb(255, 255, 255)"] *,
    div[style*="background-color: white"] *,
    div[style*="background: rgb(255, 255, 255)"] *,
    div[style*="background: white"] * {
        color: #1a202c !important;
        font-weight: 600 !important;
        text-shadow: none !important;
        -webkit-text-fill-color: #1a202c !important;
    }
    
    /* ===== FORCE ALL PARAGRAPHS IN WHITE CONTAINERS ===== */
    .stAlert p,
    .stSuccess p,
    .stInfo p,
    .stWarning p,
    .stError p,
    [data-testid="stAlert"] p,
    [data-testid="stSuccess"] p,
    [data-testid="stInfo"] p,
    [data-testid="stWarning"] p,
    [data-testid="stError"] p {
        color: #1a202c !important;
        font-weight: 600 !important;
        text-shadow: none !important;
        -webkit-text-fill-color: #1a202c !important;
        font-size: 1rem !important;
    }
    </style>
    """, unsafe_allow_html=True)

    # Force dropdown text color with JavaScript
    st.components.v1.html("""
    <script>
    function brutalForceTextFix() {
        // ALERT BOXES FIXES - FORCE BLACK TEXT
        const alertSelectors = [
            '.stSuccess', '.stSuccess *',
            '.stInfo', '.stInfo *',
            '.stWarning', '.stWarning *',
            '.stError', '.stError *',
            '.stAlert', '.stAlert *'
        ];
        
        alertSelectors.forEach(selector => {
            try {
                const elements = document.querySelectorAll(selector);
                elements.forEach(el => {
                    if (el) {
                        el.style.setProperty('background', 'rgba(255, 255, 255, 0.9)', 'important');
                        el.style.setProperty('color', '#2d3748', 'important');
                        el.style.setProperty('border', '1px solid rgba(255, 255, 255, 0.3)', 'important');
                        el.style.setProperty('border-radius', '15px', 'important');
                        el.style.setProperty('font-weight', '600', 'important');
                        el.style.setProperty('backdrop-filter', 'blur(10px)', 'important');
                    }
                });
            } catch(e) { console.log(e); }
        });
        
        // CHAT MESSAGES FIXES - FORCE BLACK TEXT
        const chatSelectors = [
            '.stChatMessage',
            '.stChatMessage *',
            '.stChatMessage p',
            '.stChatMessage div'
        ];
        
        chatSelectors.forEach(selector => {
            try {
                const elements = document.querySelectorAll(selector);
                elements.forEach(el => {
                    if (el) {
                        el.style.setProperty('color', '#2d3748', 'important');
                        el.style.setProperty('background', 'rgba(255, 255, 255, 0.8)', 'important');
                        el.style.setProperty('font-weight', '500', 'important');
                        el.style.setProperty('border-radius', '15px', 'important');
                    }
                });
            } catch(e) { console.log(e); }
        });
        
        // CODE BLOCKS FIXES
        const codeSelectors = [
            '.stCodeBlock',
            '.stCodeBlock *',
            'code',
            'pre',
            '.stCode',
            '.stCode *',
            'div[data-testid="stCodeBlock"]',
            'div[data-testid="stCodeBlock"] *',
            '.language-text'
        ];
        
        codeSelectors.forEach(selector => {
            try {
                const elements = document.querySelectorAll(selector);
                elements.forEach(el => {
                    if (el) {
                        el.style.setProperty('background-color', 'rgba(45, 55, 72, 0.95)', 'important');
                        el.style.setProperty('color', '#e2e8f0', 'important');
                        el.style.setProperty('border', '1px solid rgba(255, 255, 255, 0.1)', 'important');
                        el.style.setProperty('border-radius', '15px', 'important');
                        el.style.setProperty('padding', '1.5rem', 'important');
                        el.style.setProperty('font-family', "'JetBrains Mono', 'Courier New', monospace", 'important');
                        el.style.setProperty('font-weight', '500', 'important');
                    }
                });
            } catch(e) { console.log(e); }
        });
    }
    
    // Run immediately
    brutalForceTextFix();
    
    // Run every 500ms to catch all elements
    setInterval(brutalForceTextFix, 500);
    
    // Run on any DOM changes
    const observer = new MutationObserver(() => {
        setTimeout(brutalForceTextFix, 100);
    });
    observer.observe(document.body, { 
        childList: true, 
        subtree: true, 
        attributes: true,
        attributeOldValue: true,
        characterData: true,
        characterDataOldValue: true
    });
    
    // Run on all events
    ['click', 'focus', 'change', 'input', 'scroll'].forEach(event => {
        document.addEventListener(event, () => setTimeout(brutalForceTextFix, 50));
    });
    </script>
    """, height=0)

    # Force text color with Advanced JavaScript
    st.components.v1.html("""
    <script>
    function superBrutalForceTextFix() {
        // ALL POSSIBLE ALERT/INFO BOX SELECTORS
        const alertSelectors = [
            '.stAlert', '.stAlert *',
            '.stSuccess', '.stSuccess *', 
            '.stInfo', '.stInfo *',
            '.stWarning', '.stWarning *',
            '.stError', '.stError *',
            '[data-testid="stAlert"]', '[data-testid="stAlert"] *',
            '[data-testid="stSuccess"]', '[data-testid="stSuccess"] *',
            '[data-testid="stInfo"]', '[data-testid="stInfo"] *',
            '[data-testid="stWarning"]', '[data-testid="stWarning"] *',
            '[data-testid="stError"]', '[data-testid="stError"] *',
            '.element-container .stAlert', '.element-container .stAlert *',
            '.element-container .stSuccess', '.element-container .stSuccess *',
            '.element-container .stInfo', '.element-container .stInfo *',
            '.element-container .stWarning', '.element-container .stWarning *',
            '.element-container .stError', '.element-container .stError *',
            'div[data-testid="stTooltipHoverTarget"]',
            'div[data-testid="stTooltipHoverTarget"] *'
        ];
        
        alertSelectors.forEach(selector => {
            try {
                const elements = document.querySelectorAll(selector);
                elements.forEach(el => {
                    if (el) {
                        // Check if element has white/light background
                        const computedStyle = window.getComputedStyle(el);
                        const bgColor = computedStyle.backgroundColor;
                        
                        if (bgColor.includes('255, 255, 255') || bgColor === 'white' || bgColor === 'rgb(255, 255, 255)') {
                            el.style.setProperty('color', '#1a202c', 'important');
                            el.style.setProperty('font-weight', '600', 'important');
                            el.style.setProperty('text-shadow', 'none', 'important');
                            el.style.setProperty('-webkit-text-fill-color', '#1a202c', 'important');
                        }
                        
                        // Force for all alert-like elements anyway
                        if (el.className && (el.className.includes('stAlert') || el.className.includes('stSuccess') || 
                            el.className.includes('stInfo') || el.className.includes('stWarning') || 
                            el.className.includes('stError'))) {
                            el.style.setProperty('color', '#1a202c', 'important');
                            el.style.setProperty('font-weight', '600', 'important');
                            el.style.setProperty('text-shadow', 'none', 'important');
                            el.style.setProperty('-webkit-text-fill-color', '#1a202c', 'important');
                        }
                    }
                });
            } catch(e) { console.log('Alert selector error:', e); }
        });
        
        // CHAT MESSAGE SELECTORS
        const chatSelectors = [
            '.stChatMessage', '.stChatMessage *',
            '[data-testid="stChatMessage"]', '[data-testid="stChatMessage"] *',
            '[data-testid="chatAvatarIcon-user"]', '[data-testid="chatAvatarIcon-assistant"]',
            'div[data-testid*="chat"]', 'div[data-testid*="chat"] *'
        ];
        
        chatSelectors.forEach(selector => {
            try {
                const elements = document.querySelectorAll(selector);
                elements.forEach(el => {
                    if (el) {
                        el.style.setProperty('color', '#1a202c', 'important');
                        el.style.setProperty('font-weight', '500', 'important');
                        el.style.setProperty('text-shadow', 'none', 'important');
                        el.style.setProperty('-webkit-text-fill-color', '#1a202c', 'important');
                    }
                });
            } catch(e) { console.log('Chat selector error:', e); }
        });
        
        // GENERIC WHITE BACKGROUND ELEMENTS
        const allDivs = document.querySelectorAll('div');
        allDivs.forEach(div => {
            try {
                const computedStyle = window.getComputedStyle(div);
                const bgColor = computedStyle.backgroundColor;
                
                // If element has white background, force dark text
                if (bgColor === 'white' || bgColor === 'rgb(255, 255, 255)' || 
                    bgColor.includes('255, 255, 255') || bgColor.includes('rgba(255, 255, 255')) {
                    
                    div.style.setProperty('color', '#1a202c', 'important');
                    div.style.setProperty('font-weight', '600', 'important');
                    div.style.setProperty('text-shadow', 'none', 'important');
                    div.style.setProperty('-webkit-text-fill-color', '#1a202c', 'important');
                    
                    // Also fix all children
                    const children = div.querySelectorAll('*');
                    children.forEach(child => {
                        child.style.setProperty('color', '#1a202c', 'important');
                        child.style.setProperty('font-weight', '600', 'important');
                        child.style.setProperty('text-shadow', 'none', 'important');
                        child.style.setProperty('-webkit-text-fill-color', '#1a202c', 'important');
                    });
                }
            } catch(e) { console.log('Div check error:', e); }
        });
        
        // CODE BLOCKS - KEEP DARK
        const codeSelectors = [
            '.stCodeBlock', '.stCodeBlock *',
            'code', 'pre',
            '.stCode', '.stCode *',
            'div[data-testid="stCodeBlock"]', 'div[data-testid="stCodeBlock"] *'
        ];
        
        codeSelectors.forEach(selector => {
            try {
                const elements = document.querySelectorAll(selector);
                elements.forEach(el => {
                    if (el) {
                        el.style.setProperty('background-color', 'rgba(45, 55, 72, 0.95)', 'important');
                        el.style.setProperty('color', '#e2e8f0', 'important');
                        el.style.setProperty('border-radius', '15px', 'important');
                        el.style.setProperty('font-weight', '500', 'important');
                    }
                });
            } catch(e) { console.log('Code selector error:', e); }
        });
    }
    
    // Run immediately and very frequently
    superBrutalForceTextFix();
    setInterval(superBrutalForceTextFix, 200);
    
    // Run on DOM changes
    const observer = new MutationObserver(() => {
        setTimeout(superBrutalForceTextFix, 50);
    });
    observer.observe(document.body, { 
        childList: true, 
        subtree: true, 
        attributes: true,
        characterData: true
    });
    
    // Run on all possible events
    ['click', 'focus', 'change', 'input', 'scroll', 'resize', 'load'].forEach(event => {
        document.addEventListener(event, () => setTimeout(superBrutalForceTextFix, 25));
        window.addEventListener(event, () => setTimeout(superBrutalForceTextFix, 25));
    });
    </script>
    """, height=0)

    # ===== FINAL BRUTAL CSS FORCE TECHNIQUE =====
    st.markdown("""
    <style>
    /* ===== ULTIMATE FORCE FOR ALL PROBLEM ELEMENTS ===== */
    
    /* ALERT BOXES - MAXIMUM OVERRIDE */
    .stAlert, [data-testid="stAlert"], 
    .stSuccess, [data-testid="stSuccess"],
    .stInfo, [data-testid="stInfo"],
    .stWarning, [data-testid="stWarning"],
    .stError, [data-testid="stError"] {
        background: rgba(255, 255, 255, 0.98) !important;
        color: #1a202c !important;
        font-weight: 700 !important;
        border-radius: 15px !important;
        border: 2px solid rgba(138, 43, 226, 0.3) !important;
        padding: 1.2rem !important;
        margin: 1rem 0 !important;
        backdrop-filter: blur(10px) !important;
        text-shadow: none !important;
        -webkit-text-fill-color: #1a202c !important;
    }
    
    .stAlert *, [data-testid="stAlert"] *,
    .stSuccess *, [data-testid="stSuccess"] *,
    .stInfo *, [data-testid="stInfo"] *,
    .stWarning *, [data-testid="stWarning"] *,
    .stError *, [data-testid="stError"] * {
        color: #1a202c !important;
        font-weight: 700 !important;
        text-shadow: none !important;
        -webkit-text-fill-color: #1a202c !important;
        background: transparent !important;
    }
    
    .stAlert > div, [data-testid="stAlert"] > div,
    .stSuccess > div, [data-testid="stSuccess"] > div,
    .stInfo > div, [data-testid="stInfo"] > div,
    .stWarning > div, [data-testid="stWarning"] > div,
    .stError > div, [data-testid="stError"] > div {
        color: #1a202c !important;
        font-weight: 700 !important;
        text-shadow: none !important;
        -webkit-text-fill-color: #1a202c !important;
        background: transparent !important;
    }
    
    /* CHAT MESSAGES - MAXIMUM OVERRIDE */
    .stChatMessage, [data-testid="stChatMessage"] {
        background: rgba(255, 255, 255, 0.98) !important;
        color: #1a202c !important;
        font-weight: 600 !important;
        border-radius: 15px !important;
        border: 2px solid rgba(138, 43, 226, 0.3) !important;
        padding: 1.2rem !important;
        margin: 1rem 0 !important;
        backdrop-filter: blur(10px) !important;
        text-shadow: none !important;
        -webkit-text-fill-color: #1a202c !important;
    }
    
    .stChatMessage *, [data-testid="stChatMessage"] * {
        color: #1a202c !important;
        font-weight: 600 !important;
        text-shadow: none !important;
        -webkit-text-fill-color: #1a202c !important;
        background: transparent !important;
    }
    
    /* GENERIC WHITE BACKGROUND DIVS */
    div[style*="background-color: rgb(255, 255, 255)"],
    div[style*="background-color: white"],
    div[style*="background: rgb(255, 255, 255)"],
    div[style*="background: white"] {
        color: #1a202c !important;
        font-weight: 700 !important;
        text-shadow: none !important;
        -webkit-text-fill-color: #1a202c !important;
    }
    
    div[style*="background-color: rgb(255, 255, 255)"] *,
    div[style*="background-color: white"] *,
    div[style*="background: rgb(255, 255, 255)"] *,
    div[style*="background: white"] * {
        color: #1a202c !important;
        font-weight: 700 !important;
        text-shadow: none !important;
        -webkit-text-fill-color: #1a202c !important;
    }
    
    /* BUTTONS - DARK TEXT */
    .stButton > button {
        color: #1a202c !important;
        font-weight: 700 !important;
        text-shadow: none !important;
        -webkit-text-fill-color: #1a202c !important;
    }
    
    /* ANY P TAG IN WHITE CONTAINER */
    p {
        color: inherit !important;
        font-weight: inherit !important;
    }
    
    /* ELEMENT CONTAINERS */
    .element-container .stAlert,
    .element-container .stSuccess,
    .element-container .stInfo,
    .element-container .stWarning,
    .element-container .stError {
        background: rgba(255, 255, 255, 0.98) !important;
        color: #1a202c !important;
        font-weight: 700 !important;
        text-shadow: none !important;
        -webkit-text-fill-color: #1a202c !important;
    }
    
    .element-container .stAlert *,
    .element-container .stSuccess *,
    .element-container .stInfo *,
    .element-container .stWarning *,
    .element-container .stError * {
        color: #1a202c !important;
        font-weight: 700 !important;
        text-shadow: none !important;
        -webkit-text-fill-color: #1a202c !important;
    }
    </style>
    """, unsafe_allow_html=True)

# =============================================================================
# AI Configuration
# =============================================================================

# Multiple API keys for rotation
DEFAULT_API_KEYS = [
    "AIzaSyA7_HUTpwsa8V05hj53wx8bZYsUqodjDH0",
    "AIzaSyDbAODjEuTkTt0kdsOVOpmVOt6jhxxRgL4"
]

def show_typing_effect(container, text, typing_speed=0.03):
    """Show REALISTIC human-like typing effect with random speed, pauses, and corrections"""
    import time
    import random
    
    # Create unique ID for this typing instance
    unique_id = f"typing_{int(time.time() * 1000)}"
    
    # Use st.components.v1.html to execute JavaScript properly
    st.components.v1.html(f"""
    <div id="{unique_id}-container" style="background: rgba(40, 80, 40, 0.9); color: #FFFFFF; padding: 1rem; 
                border-radius: 15px; border: 2px solid rgba(50, 205, 50, 0.3); margin: 1rem 0;">
        <p style="color: #90EE90; margin: 0; font-weight: 600;">
            ‚ú® <span id="{unique_id}-text"></span><span id="{unique_id}-cursor" style="animation: blink 1s infinite;">|</span>
        </p>
    </div>
    
    <script>
    (function() {{
        const fullText = `{text}`;
        const typewriterElement = document.getElementById('{unique_id}-text');
        const cursor = document.getElementById('{unique_id}-cursor');
        
        if (!typewriterElement || !cursor) return;
        
        let displayText = '';
        let i = 0;
        
        // Human-like typing characteristics
        const baseSpeed = 50;  // Base typing speed
        const speedVariation = 40;  // Random speed variation
        const pauseChance = 0.15;  // 15% chance to pause
        const typoChance = 0.08;  // 8% chance to make typo
        const wrongChars = 'abcdefghijklmnopqrstuvwxyz';
        
        function getRandomSpeed() {{
            return baseSpeed + Math.random() * speedVariation;
        }}
        
        function getRandomPause() {{
            return 200 + Math.random() * 800;  // 200-1000ms pause
        }}
        
        function getRandomChar() {{
            return wrongChars[Math.floor(Math.random() * wrongChars.length)];
        }}
        
        function typeCharacter() {{
            if (i >= fullText.length) {{
                // Typing finished - hide cursor after delay
                setTimeout(() => {{
                    cursor.style.display = 'none';
                }}, 1500);
                return;
            }}
            
            const char = fullText[i];
            
            // Random chance for typo
            if (Math.random() < typoChance && char !== ' ') {{
                // Type wrong character
                const wrongChar = getRandomChar();
                displayText += wrongChar;
                typewriterElement.textContent = displayText;
                
                // Realize mistake and backspace after delay
                setTimeout(() => {{
                    displayText = displayText.slice(0, -1);
                    typewriterElement.textContent = displayText;
                    
                    // Type correct character
                    setTimeout(() => {{
                        displayText += char;
                        typewriterElement.textContent = displayText;
                        i++;
                        
                        // Continue with normal flow
                        setTimeout(typeCharacter, getRandomSpeed());
                    }}, 100 + Math.random() * 200);  // Time to type correct char
                }}, 150 + Math.random() * 300);  // Time to realize mistake
                
            }} else {{
                // Normal typing
                displayText += char;
                typewriterElement.textContent = displayText;
                i++;
                
                // Random pause (thinking)
                if (Math.random() < pauseChance) {{
                    setTimeout(typeCharacter, getRandomPause());
                }} else {{
                    // Variable speed based on character type
                    let speed = getRandomSpeed();
                    
                    // Slower for punctuation and end of words
                    if (',;:.!?'.includes(char)) {{
                        speed += 200;
                    }} else if (char === ' ') {{
                        speed += 100;
                    }} else if (char === char.toUpperCase() && char !== char.toLowerCase()) {{
                        speed += 50;  // Slower for uppercase
                    }}
                    
                    setTimeout(typeCharacter, speed);
                }}
            }}
        }}
        
        // Start typing
        typeCharacter();
    }})();
    </script>
    
    <style>
    @keyframes blink {{
        0%, 50% {{ opacity: 1; }}
        51%, 100% {{ opacity: 0; }}
    }}
    #{unique_id}-cursor {{
        animation: blink 1.2s ease-in-out infinite;
        font-weight: bold;
    }}
    #{unique_id}-text {{
        font-family: 'Courier New', monospace;
        letter-spacing: 0.5px;
    }}
    </style>
    """, height=100)

def show_typing_in_input(target_key, text):
    """Show typing effect directly in input field - realistic human typing"""
    import time
    import random
    
    # JavaScript to simulate human typing in input field
    st.components.v1.html(f"""
    <script>
    (function() {{
        const fullText = `{text}`;
        const inputKey = '{target_key}';
        
        // Better input finder - use multiple strategies
        function findInputByKey(key) {{
            // Strategy 1: Find by exact key match in data-testid
            let input = document.querySelector(`[data-testid="stTextInput"] input[aria-label*="${{key}}"]`);
            if (input) return input;
            
            input = document.querySelector(`[data-testid="stTextArea"] textarea[aria-label*="${{key}}"]`);
            if (input) return input;
            
            // Strategy 2: Find by key in the input's container
            const allInputs = document.querySelectorAll('input[type="text"], textarea');
            for (let inp of allInputs) {{
                // Check if input key contains our target
                if (inp.getAttribute('data-baseweb') && inp.getAttribute('data-baseweb').includes('input')) {{
                    const container = inp.closest('.stTextInput, .stTextArea');
                    if (container) {{
                        // Check previous siblings for matching key
                        let sibling = container.previousElementSibling;
                        while (sibling) {{
                            if (sibling.textContent && sibling.textContent.includes(key)) {{
                                return inp;
                            }}
                            sibling = sibling.previousElementSibling;
                        }}
                    }}
                }}
            }}
            
            // Strategy 3: Find by position and context
            const inputs = document.querySelectorAll('input, textarea');
            for (let inp of inputs) {{
                const parent = inp.closest('div[data-testid="stTextInput"], div[data-testid="stTextArea"]');
                if (parent) {{
                    // Get the section this input belongs to
                    const section = parent.closest('.stContainer, .element-container');
                    if (section && section.innerHTML.includes(key)) {{
                        return inp;
                    }}
                }}
            }}
            
            // Strategy 4: Use data-testid pattern matching
            if (key === 'context_vi') {{
                input = document.querySelector('[data-testid="stTextArea"] textarea');
                if (input && input.placeholder && input.placeholder.includes('Paris')) return input;
            }}
            
            if (key === 'script_idea') {{
                const textareas = document.querySelectorAll('[data-testid="stTextArea"] textarea');
                for (let ta of textareas) {{
                    if (ta.placeholder && ta.placeholder.includes('m√πa xu√¢n')) {{
                        return ta;
                    }}
                }}
            }}
            
            if (key.includes('char_name_')) {{
                const inputs = document.querySelectorAll('[data-testid="stTextInput"] input');
                for (let inp of inputs) {{
                    if (inp.placeholder && inp.placeholder.includes('John')) {{
                        return inp;
                    }}
                }}
            }}
            
            if (key.includes('char_desc_')) {{
                const textareas = document.querySelectorAll('[data-testid="stTextArea"] textarea');
                for (let ta of textareas) {{
                    if (ta.placeholder && ta.placeholder.includes('30 tu·ªïi')) {{
                        return ta;
                    }}
                }}
            }}
            
            if (key.includes('voice_desc_')) {{
                const textareas = document.querySelectorAll('[data-testid="stTextArea"] textarea');
                for (let ta of textareas) {{
                    if (ta.placeholder && ta.placeholder.includes('nh·ªè nh·∫π')) {{
                        return ta;
                    }}
                }}
            }}
            
            if (key === 'sound_vi') {{
                const textareas = document.querySelectorAll('[data-testid="stTextArea"] textarea');
                for (let ta of textareas) {{
                    if (ta.placeholder && ta.placeholder.includes('th√¨ th·∫ßm')) {{
                        return ta;
                    }}
                }}
            }}
            
            return null;
        }}
        
        // Wait for DOM to be ready and find input
        function waitForInput(retries = 0) {{
            if (retries > 20) {{
                console.log('Could not find input for key:', inputKey);
                return;
            }}
            
            const input = findInputByKey(inputKey);
            if (input) {{
                typeInInput(input);
            }} else {{
                // Retry after short delay
                setTimeout(() => waitForInput(retries + 1), 500);
            }}
        }}
        
        function typeInInput(inputElement) {{
            console.log('Starting typing in:', inputElement);
            
            inputElement.value = ''; // Clear first
            inputElement.focus(); // Focus on input
            
            let i = 0;
            const baseSpeed = 80; // Base typing speed (ms)
            const speedVariation = 50; // Random variation
            const pauseChance = 0.15; // 15% chance to pause
            const typoChance = 0.08; // 8% chance for typo
            const wrongChars = 'abcdefghijklmnopqrstuvwxyz';
            
            function getRandomSpeed() {{
                return baseSpeed + Math.random() * speedVariation;
            }}
            
            function getRandomPause() {{
                return 400 + Math.random() * 800; // 400-1200ms pause
            }}
            
            function getRandomChar() {{
                return wrongChars[Math.floor(Math.random() * wrongChars.length)];
            }}
            
            function typeNextChar() {{
                if (i >= fullText.length) {{
                    // Typing finished - trigger Streamlit change event
                    inputElement.dispatchEvent(new Event('input', {{ bubbles: true }}));
                    inputElement.dispatchEvent(new Event('change', {{ bubbles: true }}));
                    inputElement.blur(); // Remove focus
                    console.log('Typing completed');
                    return;
                }}
                
                const char = fullText[i];
                
                // Random chance for typo
                if (Math.random() < typoChance && char !== ' ' && char !== '.' && char !== ',' && char !== '!' && char !== '?') {{
                    // Type wrong character
                    const wrongChar = getRandomChar();
                    inputElement.value += wrongChar;
                    
                    // Trigger visual update
                    inputElement.dispatchEvent(new Event('input', {{ bubbles: true }}));
                    
                    // Realize mistake and backspace after delay
                    setTimeout(() => {{
                        inputElement.value = inputElement.value.slice(0, -1);
                        inputElement.dispatchEvent(new Event('input', {{ bubbles: true }}));
                        
                        // Type correct character
                        setTimeout(() => {{
                            inputElement.value += char;
                            inputElement.dispatchEvent(new Event('input', {{ bubbles: true }}));
                            i++;
                            
                            // Continue with normal flow
                            setTimeout(typeNextChar, getRandomSpeed());
                        }}, 100 + Math.random() * 150); // Time to type correct char
                    }}, 250 + Math.random() * 400); // Time to realize mistake
                    
                }} else {{
                    // Normal typing
                    inputElement.value += char;
                    inputElement.dispatchEvent(new Event('input', {{ bubbles: true }}));
                    i++;
                    
                    // Random pause (thinking/hesitation)
                    if (Math.random() < pauseChance) {{
                        setTimeout(typeNextChar, getRandomPause());
                    }} else {{
                        // Variable speed based on character type
                        let speed = getRandomSpeed();
                        
                        // Slower for punctuation and end of sentences
                        if ('.!?'.includes(char)) {{
                            speed += 600; // Long pause after sentences
                        }} else if (',;:'.includes(char)) {{
                            speed += 300; // Medium pause after punctuation
                        }} else if (char === ' ') {{
                            speed += 80; // Slight pause after words
                        }} else if (char === char.toUpperCase() && char !== char.toLowerCase()) {{
                            speed += 40; // Slightly slower for uppercase
                        }}
                        
                        setTimeout(typeNextChar, speed);
                    }}
                }}
            }}
            
            // Start typing with a small delay
            setTimeout(typeNextChar, 800);
        }}
        
        // Start the process
        waitForInput();
    }})();
    </script>
    """, height=0)

def get_current_api_key():
    """Get current API key from session state or default"""
    if 'custom_api_key' in st.session_state and st.session_state.custom_api_key:
        return st.session_state.custom_api_key
    
    # Rotate between default keys
    if 'api_key_index' not in st.session_state:
        st.session_state.api_key_index = 0
    
    return DEFAULT_API_KEYS[st.session_state.api_key_index % len(DEFAULT_API_KEYS)]

def rotate_api_key():
    """Rotate to next API key when current one fails"""
    if 'api_key_index' not in st.session_state:
        st.session_state.api_key_index = 0
    st.session_state.api_key_index = (st.session_state.api_key_index + 1) % len(DEFAULT_API_KEYS)

def call_gemini_api(prompt_text: str) -> str:
    """Call Gemini API for text generation with automatic key rotation"""
    max_retries = len(DEFAULT_API_KEYS)
    
    for attempt in range(max_retries):
        try:
            api_key = get_current_api_key()
            api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={api_key}"
            
            payload = {
                "contents": [{"role": "user", "parts": [{"text": prompt_text}]}],
                "generationConfig": {"responseMimeType": "text/plain"}
            }
            
            response = requests.post(
                api_url,
                headers={'Content-Type': 'application/json'},
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                if (result.get('candidates') and len(result['candidates']) > 0 and
                    result['candidates'][0].get('content') and 
                    result['candidates'][0]['content'].get('parts') and
                    len(result['candidates'][0]['content']['parts']) > 0):
                    return result['candidates'][0]['content']['parts'][0]['text'].strip()
            
            # If we get 403 or quota exceeded, try next key
            if response.status_code in [403, 429]:
                rotate_api_key()
                continue
            
            st.error(f"L·ªói API: {response.status_code}")
            return ""
            
        except Exception as e:
            if attempt < max_retries - 1:
                rotate_api_key()
                continue
            st.error(f"L·ªói k·∫øt n·ªëi AI: {str(e)}")
            return ""
    
    st.error("T·∫•t c·∫£ API key ƒë·ªÅu kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng th√™m API key c·ªßa b·∫°n.")
    return ""

def call_veo3_api(prompt_text: str) -> Dict:
    """Call VEO 3 API for video generation (placeholder)"""
    # This would be the actual VEO 3 API call
    # For now, return a mock response
    import time
    time.sleep(2)  # Simulate API call
    
    return {
        "status": "success",
        "video_id": f"veo3_{int(time.time())}",
        "video_url": "https://example.com/generated_video.mp4",
        "thumbnail_url": "https://example.com/thumbnail.jpg",
        "duration": 8,
        "resolution": "1080p"
    }

# =============================================================================
# AI Functions - Chu·∫©n theo manguon.txt
# =============================================================================

def translate_to_english(vietnamese_text: str, field_type: str) -> str:
    """Translate Vietnamese text to English for specific field types"""
    if not vietnamese_text.strip():
        return ""
    
    prompts = {
        "context": f"D·ªãch ch√≠nh x√°c ho√†n c·∫£nh sau sang ti·∫øng Anh cho prompt video AI, ch·ªâ tr·∫£ l·ªùi b·∫±ng b·∫£n d·ªãch: {vietnamese_text}",
        "character": f"D·ªãch ch√≠nh x√°c m√¥ t·∫£ nh√¢n v·∫≠t sau sang ti·∫øng Anh cho prompt video AI, ch·ªâ tr·∫£ l·ªùi b·∫±ng b·∫£n d·ªãch: {vietnamese_text}",
        "sound": f"D·ªãch ch√≠nh x√°c m√¥ t·∫£ √¢m thanh sau sang ti·∫øng Anh cho prompt video AI, ch·ªâ tr·∫£ l·ªùi b·∫±ng b·∫£n d·ªãch: {vietnamese_text}",
        "voice": f"D·ªãch ch√≠nh x√°c m√¥ t·∫£ gi·ªçng n√≥i sau sang ti·∫øng Anh cho prompt video AI, ch·ªâ tr·∫£ l·ªùi b·∫±ng b·∫£n d·ªãch: {vietnamese_text}"
    }
    
    prompt = prompts.get(field_type, f"D·ªãch ch√≠nh x√°c sang ti·∫øng Anh: {vietnamese_text}")
    return call_gemini_api(prompt)

def suggest_content(field_type: str, field_name: str, current_context: Dict, current_character_name: str = "") -> str:
    """Generate AI suggestions for different content types - ch√≠nh x√°c theo manguon.txt"""
    
    # Build context for AI
    context_for_ai = ""
    if current_context.get('context'):
        context_for_ai += f"\n- Ho√†n c·∫£nh t·ªïng th·ªÉ: {current_context['context']}"
    if current_context.get('sound'):
        context_for_ai += f"\n- √Çm thanh t·ªïng th·ªÉ: {current_context['sound']}"
    
    if current_context.get('characters'):
        for idx, char in enumerate(current_context['characters']):
            context_for_ai += f"\n- Nh√¢n v·∫≠t {idx + 1}"
            if char.get('name'):
                context_for_ai += f" (t√™n: {char['name']})"
            if char.get('description'):
                context_for_ai += f": {char['description']}"
            if char.get('voice'):
                context_for_ai += f" | Gi·ªçng n√≥i: {char['voice']}"
            if char.get('dialogue'):
                context_for_ai += f" | L·ªùi tho·∫°i: {char['dialogue']}"
    
    if context_for_ai:
        context_for_ai = f"\n\nD·ª±a tr√™n c√°c y·∫øu t·ªë ƒë√£ c√≥:\n{context_for_ai.strip()}"
    
    # Generate prompts based on type - theo ƒë√∫ng manguon.txt
    if field_type == 'characterName':
        prompt_text = f"""Ch·ªâ g·ª£i √Ω m·ªôt {field_name} s√°ng t·∫°o v√† ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát cho m·ªôt nh√¢n v·∫≠t m·ªõi. Kh√¥ng th√™m b·∫•t k·ª≥ vƒÉn b·∫£n gi·∫£i th√≠ch, ti√™u ƒë·ªÅ, ho·∫∑c n·ªôi dung n√†o kh√°c ngo√†i ch√≠nh {field_name}.
        {context_for_ai}
        
        Y√™u c·∫ßu: G·ª£i √Ω cho {field_name}."""
        
    elif field_type == 'voice':
        prompt_text = f"""Ch·ªâ g·ª£i √Ω m·ªôt m√¥ t·∫£ v·ªÅ ƒë·∫∑c ƒëi·ªÉm gi·ªçng n√≥i (nh∆∞ t√¥ng, √¢m s·∫Øc, c·∫£m x√∫c, t·ªëc ƒë·ªô, phong c√°ch) s√°ng t·∫°o v√† ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát cho m·ªôt nh√¢n v·∫≠t. Kh√¥ng th√™m b·∫•t k·ª≥ vƒÉn b·∫£n gi·∫£i th√≠ch, ti√™u ƒë·ªÅ, ho·∫∑c n·ªôi dung n√†o kh√°c ngo√†i ch√≠nh m√¥ t·∫£ gi·ªçng n√≥i.
        {context_for_ai}
        {f"(D√†nh cho nh√¢n v·∫≠t t√™n: {current_character_name})" if current_character_name else ""}
        
        Y√™u c·∫ßu: G·ª£i √Ω cho m√¥ t·∫£ gi·ªçng n√≥i."""
        
    elif field_type == 'sound':
        prompt_text = f"""Ch·ªâ g·ª£i √Ω c√°c y·∫øu t·ªë √¢m thanh s√°ng t·∫°o v√† ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát cho m·ªôt c·∫£nh quay video. ƒê·ªãnh d·∫°ng n√≥ d∆∞·ªõi d·∫°ng hi·ªáu ·ª©ng √¢m thanh (SFX) ho·∫∑c √¢m thanh m√¥i tr∆∞·ªùng (AMBIENCE), s·ª≠ d·ª•ng c√°c ti·ªÅn t·ªë nh∆∞ 'SFX:' ho·∫∑c 'AMBIENCE:' n·∫øu ph√π h·ª£p. Kh√¥ng th√™m b·∫•t k·ª≥ vƒÉn b·∫£n gi·∫£i th√≠ch, ti√™u ƒë·ªÅ, ho·∫∑c n·ªôi dung n√†o kh√°c ngo√†i ch√≠nh c√°c y·∫øu t·ªë √¢m thanh.
        {context_for_ai}
        
        Y√™u c·∫ßu: G·ª£i √Ω cho √¢m thanh."""
        
    else:  # context, character
        prompt_text = f"""Ch·ªâ g·ª£i √Ω m·ªôt {field_name} s√°ng t·∫°o v√† ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát cho m·ªôt c·∫£nh quay video. Kh√¥ng th√™m b·∫•t k·ª≥ vƒÉn b·∫£n gi·∫£i th√≠ch, ti√™u ƒë·ªÅ, ho·∫∑c n·ªôi dung n√†o kh√°c ngo√†i ch√≠nh m√¥ t·∫£ {field_name}.
        {context_for_ai}
        {f"(D√†nh cho nh√¢n v·∫≠t t√™n: {current_character_name})" if field_type == 'character' and current_character_name else ""}
        
        Y√™u c·∫ßu: G·ª£i √Ω cho {field_name}."""
    
    return call_gemini_api(prompt_text)

def expand_dialogue(dialogue: str) -> str:
    """Expand Vietnamese dialogue - theo ƒë√∫ng manguon.txt"""
    if not dialogue.strip():
        return ""
    
    prompt = f"""M·ªü r·ªông l·ªùi tho·∫°i ti·∫øng Vi·ªát sau ƒë√¢y cho m·ªôt c·∫£nh quay video, gi·ªØ nguy√™n t√¥ng gi·ªçng v√† √Ω nghƒ©a ban ƒë·∫ßu. Cung c·∫•p m·ªôt phi√™n b·∫£n d√†i h∆°n m·ªôt ch√∫t ho·∫∑c m·ªôt v√†i d√≤ng thay th·∫ø. Ch·ªâ tr·∫£ l·ªùi b·∫±ng l·ªùi tho·∫°i ƒë√£ m·ªü r·ªông.
L·ªùi tho·∫°i: {dialogue}"""
    
    return call_gemini_api(prompt)

def generate_long_script(idea: str) -> str:
    """Generate long video script from idea - theo ƒë√∫ng manguon.txt"""
    prompt = f"""T·∫°o m·ªôt k·ªãch b·∫£n nh√°p chi ti·∫øt cho m·ªôt video d√†i d·ª±a tr√™n √Ω t∆∞·ªüng ti·∫øng Vi·ªát sau ƒë√¢y.
K·ªãch b·∫£n ph·∫£i ƒë∆∞·ª£c chia th√†nh c√°c ph√¢n c·∫£nh. M·ªñI PH√ÇN C·∫¢NH PH·∫¢I TU√ÇN TH·ª¶ ƒê·ªäNH D·∫†NG SAU ƒê√ÇY M·ªòT C√ÅCH CH√çNH X√ÅC, KH√îNG TH√äM B·∫§T B·∫§T K·ª≤ VƒÇN B·∫¢N N√ÄO KH√ÅC NGO√ÄI N·ªòI DUNG Y√äU C·∫¶U. ƒê·∫£m b·∫£o c√°c ti√™u ƒë·ªÅ nh∆∞ [Ho√†n c·∫£nh], [M√¥ t·∫£ nh√¢n v·∫≠t], [L·ªùi tho·∫°i], [√Çm thanh] ƒë∆∞·ª£c vi·∫øt ch√≠nh x√°c v√† kh√¥ng c√≥ d·∫•u hai ch·∫•m sau d·∫•u ngo·∫∑c vu√¥ng.
Trong [M√¥ t·∫£ nh√¢n v·∫≠t], n·∫øu c√≥ nhi·ªÅu nh√¢n v·∫≠t, h√£y m√¥ t·∫£ t·ª´ng nh√¢n v·∫≠t m·ªôt c√°ch r√µ r√†ng, c√≥ th·ªÉ ƒë·∫∑t t√™n cho nh√¢n v·∫≠t (v√≠ d·ª•: "Nh√¢n v·∫≠t A: m√¥ t·∫£...", "Nh√¢n v·∫≠t B: m√¥ t·∫£...").

√ù t∆∞·ªüng Clip D√†i:
{idea}

ƒê·ªãnh d·∫°ng ƒë·∫ßu ra:
C·∫£nh 1:
[Ho√†n c·∫£nh]
<n·ªôi dung ho√†n c·∫£nh>
[M√¥ t·∫£ nh√¢n v·∫≠t]
<n·ªôi dung m√¥ t·∫£ nh√¢n v·∫≠t 1, c√≥ th·ªÉ bao g·ªìm t√™n>
<n·ªôi dung m√¥ t·∫£ nh√¢n v·∫≠t 2, c√≥ th·ªÉ bao g·ªìm t√™n (n·∫øu c√≥)>
[L·ªùi tho·∫°i]
<"Nh√¢n v·∫≠t A: L·ªùi tho·∫°i c·ªßa A...">
<"Nh√¢n v·∫≠t B: L·ªùi tho·∫°i c·ªßa B...">
[√Çm thanh]
<n·ªôi dung √¢m thanh (c√≥ ti·ªÅn t·ªë SFX: ho·∫∑c AMBIENCE:)>

C·∫£nh 2:
... (t∆∞∆°ng t·ª±)"""
    
    return call_gemini_api(prompt)

def convert_script_to_prompts(script: str) -> List[Dict]:
    """Convert script to individual Veo3 prompts - theo ƒë√∫ng manguon.txt"""
    prompt = f"""Chuy·ªÉn ƒë·ªïi k·ªãch b·∫£n ti·∫øng Vi·ªát sau th√†nh c√°c prompt ri√™ng bi·ªát cho Veo 3. M·ªói c·∫£nh trong k·ªãch b·∫£n s·∫Ω tr·ªü th√†nh m·ªôt prompt ho√†n ch·ªânh.

QUY T·∫ÆC CHUY·ªÇN ƒê·ªîI:
1. D·ªãch "Ho√†n c·∫£nh", "M√¥ t·∫£ nh√¢n v·∫≠t", "√Çm thanh" sang ti·∫øng Anh
2. GI·ªÆ NGUY√äN "L·ªùi tho·∫°i" b·∫±ng ti·∫øng Vi·ªát
3. T√≠ch h·ª£p t·∫•t c·∫£ th√†nh m·ªôt prompt li·ªÅn m·∫°ch cho m·ªói c·∫£nh
4. ƒê·ªãnh d·∫°ng: Setting: [ho√†n c·∫£nh]. Characters: [nh√¢n v·∫≠t]. [L·ªùi tho·∫°i ti·∫øng Vi·ªát]. Audio: [√¢m thanh].

K·ªäCH B·∫¢N:
{script}

Tr·∫£ v·ªÅ theo ƒë·ªãnh d·∫°ng:
=== C·∫¢NH 1 ===
[Prompt ho√†n ch·ªânh cho c·∫£nh 1]

=== C·∫¢NH 2 ===
[Prompt ho√†n ch·ªânh cho c·∫£nh 2]

... (ti·∫øp t·ª•c cho c√°c c·∫£nh kh√°c)"""
    
    result = call_gemini_api(prompt)
    
    # Parse scenes
    scenes = []
    if result:
        parts = result.split("=== C·∫¢NH")
        for i, part in enumerate(parts[1:], 1):
            if "===" in part:
                scene_content = part.split("===")[1].strip()
                scenes.append({
                    "scene_number": i,
                    "prompt": scene_content
                })
    
    return scenes

def generate_final_prompt(context_vi: str, characters: List[Dict], sound_vi: str) -> str:
    """Generate final prompt exactly like manguon.txt"""
    
    # Translate components to English
    context_en = translate_to_english(context_vi, "context") if context_vi else ""
    sound_en = translate_to_english(sound_vi, "sound") if sound_vi else ""
    
    # Build prompt parts
    prompt_parts = []
    
    # Add setting
    if context_en:
        prompt_parts.append(f"Setting: {context_en}")
    
    # Add characters
    for char in characters:
        if char.get('description'):
            char_desc_en = translate_to_english(char['description'], "character")
            if char_desc_en:
                char_name = char.get('name', 'Character')
                prompt_parts.append(f"Character - {char_name}: {char_desc_en}")
        
        if char.get('voice'):
            voice_en = translate_to_english(char['voice'], "voice")
            if voice_en:
                char_name = char.get('name', 'Character')
                prompt_parts.append(f"{char_name} voice: {voice_en}")
    
    # Add dialogues (keep Vietnamese)
    for char in characters:
        if char.get('dialogue'):
            char_name = char.get('name', 'Character')
            prompt_parts.append(f'{char_name}: "{char["dialogue"]}"')
    
    # Add audio
    if sound_en:
        prompt_parts.append(f"Audio: {sound_en}")
    
    return ". ".join(prompt_parts)

# =============================================================================
# ADVANCED FEATURE PAGES - 7 T√çNH NƒÇNG M·ªöI
# =============================================================================

def ai_assistant_page():
    """AI Assistant Advanced page"""
    st.header("ü§ñ Chat v·ªõi AI Assistant")
    
    st.info("üí¨ Tr·ª£ l√Ω AI th√¥ng minh - h·ªó tr·ª£ t·∫°o content v√† video VEO3")
    
    # Initialize chat history
    if "chat_messages" not in st.session_state:
        st.session_state.chat_messages = [
            {"role": "assistant", "content": "Xin ch√†o! T√¥i l√† AI Assistant. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\nüé¨ T·∫°o √Ω t∆∞·ªüng video\nüìù Vi·∫øt script\nüéØ T·ªëi ∆∞u content\nüìä Ph√¢n t√≠ch xu h∆∞·ªõng\n\nB·∫°n c·∫ßn h·ªó tr·ª£ g√¨?"}
        ]
    
    # Display chat messages
    for message in st.session_state.chat_messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # Chat input
    if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
        # Add user message
        st.session_state.chat_messages.append({"role": "user", "content": prompt})
        
        # Display user message
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Generate AI response
        with st.chat_message("assistant"):
            with st.spinner("ƒêang suy nghƒ©..."):
                ai_prompt = f"""B·∫°n l√† AI Assistant cho VEO3 Vietnamese. Tr·∫£ l·ªùi c√¢u h·ªèi sau b·∫±ng ti·∫øng Vi·ªát:

C√¢u h·ªèi: {prompt}

H√£y tr·∫£ l·ªùi h·ªØu √≠ch, li√™n quan ƒë·∫øn t·∫°o video, content creation."""
                
                response = call_gemini_api(ai_prompt)
                if response:
                    st.markdown(response)
                    st.session_state.chat_messages.append({"role": "assistant", "content": response})
                else:
                    error_msg = "Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i."
                    st.markdown(error_msg)
                    st.session_state.chat_messages.append({"role": "assistant", "content": error_msg})
    
    # Quick actions
    st.subheader("‚ö° G·ª£i √Ω nhanh")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üí° √ù t∆∞·ªüng video hot"):
            suggestion = "üî• **√ù t∆∞·ªüng video trending:**\n\n‚Ä¢ Daily vlog - cu·ªôc s·ªëng th∆∞·ªùng ng√†y\n‚Ä¢ Food review - ƒë√°nh gi√° m√≥n ƒÉn\n‚Ä¢ Travel vlog - du l·ªãch kh√°m ph√°\n‚Ä¢ Tech unboxing - m·ªü h·ªôp c√¥ng ngh·ªá\n‚Ä¢ Beauty tips - m·∫πo l√†m ƒë·∫πp"
            st.session_state.chat_messages.append({"role": "assistant", "content": suggestion})
            st.rerun()
    
    with col2:
        if st.button("üìà Hashtag trending"):
            hashtags = "üìä **Hashtag hot hi·ªán t·∫°i:**\n\n#vietnam #viral #trending #fyp #xuhuong #lifestyle #food #travel #beauty #tech #daily #vlog #review #tips"
            st.session_state.chat_messages.append({"role": "assistant", "content": hashtags})
            st.rerun()
    
    with col3:
        if st.button("üé¨ M·∫πo t·∫°o video"):
            tips = "üéØ **M·∫πo t·∫°o video hi·ªáu qu·∫£:**\n\n‚Ä¢ Hook ƒë·∫ßu video trong 3s ƒë·∫ßu\n‚Ä¢ √Ånh s√°ng t·ª± nhi√™n t·ªët nh·∫•t\n‚Ä¢ √Çm thanh r√µ r√†ng quan tr·ªçng\n‚Ä¢ G√≥c quay ƒëa d·∫°ng\n‚Ä¢ Call-to-action cu·ªëi video"
            st.session_state.chat_messages.append({"role": "assistant", "content": tips})
            st.rerun()
    
    # Clear chat
    if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ chat"):
        st.session_state.chat_messages = [
            {"role": "assistant", "content": "Xin ch√†o! T√¥i l√† AI Assistant. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?"}
        ]
        st.rerun()

def mobile_app_page():
    """Mobile App Design page"""
    try:
        from mobile_app_design import create_mobile_app
        mobile_app = create_mobile_app()
        mobile_app.render_mobile_app_page()
    except Exception as e:
        st.error(f"L·ªói Mobile App: {str(e)}")
        # Fallback content
        st.markdown("""
        <div class="vietnamese-glass">
            <h1>üì± Mobile App Design</h1>
            <p>üöß T√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. Vui l√≤ng quay l·∫°i sau!</p>
            
            <h3>üé® S·∫Øp c√≥:</h3>
            <ul>
                <li>üì± UI/UX design mockup</li>
                <li>‚öõÔ∏è React Native tech stack</li>
                <li>üó∫Ô∏è Development roadmap</li>
                <li>üí∞ Monetization strategy</li>
                <li>üöÄ App store optimization</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

def templates_page():
    """Professional Templates page"""
    try:
        from professional_templates import create_professional_templates
        templates = create_professional_templates()
        templates.render_templates_page()
    except Exception as e:
        st.error(f"L·ªói Templates: {str(e)}")
        # Fallback content
        st.markdown("""
        <div class="vietnamese-glass">
            <h1>üé® Professional Templates</h1>
            <p>üöß T√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. Vui l√≤ng quay l·∫°i sau!</p>
            
            <h3>üéØ S·∫Øp c√≥ 150+ Templates:</h3>
            <ul>
                <li>üçú ·∫®m th·ª±c Vi·ªát Nam</li>
                <li>üèñÔ∏è Du l·ªãch trong n∆∞·ªõc</li>
                <li>üíÑ Lifestyle & Beauty</li>
                <li>üéì Gi√°o d·ª•c & H·ªçc t·∫≠p</li>
                <li>üè¢ Kinh doanh & Kh·ªüi nghi·ªáp</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

def monetization_page():
    """Monetization System page"""
    try:
        from monetization_system import create_monetization_system
        monetization = create_monetization_system()
        monetization.render_monetization_page()
    except Exception as e:
        st.error(f"L·ªói Monetization: {str(e)}")
        # Fallback content
        st.markdown("""
        <div class="vietnamese-glass">
            <h1>üí∞ Monetization System</h1>
            <p>üöß T√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. Vui l√≤ng quay l·∫°i sau!</p>
            
            <h3>üí≥ C√°c g√≥i s·∫Øp c√≥:</h3>
            <ul>
                <li>üÜì Free - 5 videos/th√°ng</li>
                <li>‚≠ê Basic - 99K - 25 videos/th√°ng</li>
                <li>üöÄ Pro - 199K - 100 videos/th√°ng</li>
                <li>üëë Ultimate - 499K - Unlimited</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

def community_page():
    """Community & Marketing page"""
    try:
        from community_marketing import create_community_marketing
        community = create_community_marketing()
        community.render_community_marketing_page()
    except Exception as e:
        st.error(f"L·ªói Community: {str(e)}")
        # Fallback content
        st.markdown("""
        <div class="vietnamese-glass">
            <h1>üåê Community & Marketing</h1>
            <p>üöß T√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. Vui l√≤ng quay l·∫°i sau!</p>
            
            <h3>üéâ S·∫Øp c√≥:</h3>
            <ul>
                <li>üë• Community feed & groups</li>
                <li>üèÜ Contest 50M VNƒê</li>
                <li>üåü Influencer program</li>
                <li>üìä Marketing analytics</li>
                <li>üéØ Viral campaign tools</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

def utility_page():
    """Utility Features page"""
    st.header("üîß Utility Features")
    
    st.info("üõ†Ô∏è C√°c c√¥ng c·ª• h·ªó tr·ª£ t·∫°o content hi·ªáu qu·∫£")
    
    # Text Tools Section
    st.subheader("üìù Text Tools")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üî§ Text Generator**")
        text_type = st.selectbox(
            "Lo·∫°i text:",
            ["Video Title", "Video Description", "Hashtags", "Call-to-Action"]
        )
        
        text_topic = st.text_input("Ch·ªß ƒë·ªÅ:", placeholder="V√≠ d·ª•: review ƒëi·ªán tho·∫°i m·ªõi")
        
        if st.button("‚ú® T·∫°o Text"):
            if text_topic:
                with st.spinner("ƒêang t·∫°o..."):
                    prompt = f"T·∫°o {text_type} b·∫±ng ti·∫øng Vi·ªát cho ch·ªß ƒë·ªÅ: {text_topic}. H√£y vi·∫øt ng·∫Øn g·ªçn, h·∫•p d·∫´n v√† ph√π h·ª£p v·ªõi social media."
                    result = call_gemini_api(prompt)
                    if result:
                        st.success("‚úÖ ƒê√£ t·∫°o!")
                        st.code(result)
                    else:
                        st.error("‚ùå L·ªói khi t·∫°o text")
    
    with col2:
        st.markdown("**üéµ Idea Generator**")
        content_type = st.selectbox(
            "Lo·∫°i content:",
            ["TikTok Video", "YouTube Shorts", "Instagram Reel", "Facebook Video"]
        )
        
        niche = st.selectbox(
            "Lƒ©nh v·ª±c:",
            ["Lifestyle", "Food", "Tech", "Beauty", "Travel", "Education", "Entertainment"]
        )
        
        if st.button("üí° T·∫°o √ù t∆∞·ªüng"):
            with st.spinner("ƒêang nghƒ©..."):
                prompt = f"T·∫°o 5 √Ω t∆∞·ªüng {content_type} trong lƒ©nh v·ª±c {niche} b·∫±ng ti·∫øng Vi·ªát. M·ªói √Ω t∆∞·ªüng ghi r√µ concept, hook v√† c√°ch th·ª±c hi·ªán."
                result = call_gemini_api(prompt)
                if result:
                    st.success("‚úÖ C√≥ √Ω t∆∞·ªüng r·ªìi!")
                    st.markdown(result)
                else:
                    st.error("‚ùå L·ªói khi t·∫°o √Ω t∆∞·ªüng")
    
    st.divider()
    
    # SEO & Analytics Tools
    st.subheader("üìä SEO & Analytics Tools")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üè∑Ô∏è Hashtag Generator**")
        hashtag_topic = st.text_input("Ch·ªß ƒë·ªÅ hashtag:", placeholder="V√≠ d·ª•: ·∫©m th·ª±c Vi·ªát Nam")
        
        if st.button("üîç T·∫°o Hashtags"):
            if hashtag_topic:
                with st.spinner("ƒêang t√¨m hashtags..."):
                    prompt = f"T·∫°o 20 hashtag ti·∫øng Vi·ªát v√† ti·∫øng Anh cho ch·ªß ƒë·ªÅ '{hashtag_topic}'. Chia th√†nh 3 nh√≥m: Popular, Niche, Branded."
                    result = call_gemini_api(prompt)
                    if result:
                        st.success("‚úÖ Hashtags ready!")
                        st.text_area("Copy hashtags:", result, height=150)
                    else:
                        st.error("‚ùå L·ªói khi t·∫°o hashtags")
    
    with col2:
        st.markdown("**üìà Content Calendar**")
        calendar_niche = st.selectbox(
            "Lƒ©nh v·ª±c content:",
            ["Personal Brand", "Business", "Food Blog", "Tech Review", "Beauty", "Travel"],
            key="calendar_niche"
        )
        
        days = st.slider("S·ªë ng√†y:", 7, 30, 7)
        
        if st.button("üìÖ T·∫°o Calendar"):
            with st.spinner("ƒêang l·∫≠p k·∫ø ho·∫°ch..."):
                prompt = f"T·∫°o content calendar {days} ng√†y cho {calendar_niche} b·∫±ng ti·∫øng Vi·ªát. M·ªói ng√†y ghi r√µ: ch·ªß ƒë·ªÅ, lo·∫°i content, platform, th·ªùi gian ƒëƒÉng."
                result = call_gemini_api(prompt)
                if result:
                    st.success("‚úÖ Calendar done!")
                    st.markdown(result)
                else:
                    st.error("‚ùå L·ªói khi t·∫°o calendar")
    
    st.divider()
    
    # Quick Tools
    st.subheader("‚ö° Quick Tools")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**‚è∞ Best Time to Post**")
        if st.button("üïê Xem th·ªùi gian t·ªët"):
            st.info("""
            **üì± TikTok:** 6-10h, 19-24h
            **üì∫ YouTube:** 14-16h, 20-22h  
            **üì∑ Instagram:** 11-13h, 17-19h
            **üë• Facebook:** 9-10h, 15-16h
            """)
    
    with col2:
        st.markdown("**üìê Video Specs**")
        if st.button("üìè Xem k√≠ch th∆∞·ªõc"):
            st.info("""
            **TikTok:** 1080x1920 (9:16)
            **YouTube Shorts:** 1080x1920 (9:16)
            **Instagram Reel:** 1080x1920 (9:16)
            **YouTube:** 1920x1080 (16:9)
            """)
    
    with col3:
        st.markdown("**üé® Color Palette**")
        if st.button("üåà T·∫°o m√†u s·∫Øc"):
            colors = ["#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4", "#FFEAA7", "#DDA0DD"]
            st.color_picker("M√†u ch√≠nh:", colors[0])
            st.write("Palette g·ª£i √Ω:", " | ".join(colors))

def targeting_page():
    """Vietnam Targeting page"""
    try:
        from vietnam_targeting import create_vietnam_targeting
        targeting = create_vietnam_targeting()
        targeting.render_vietnam_targeting_page()
    except Exception as e:
        st.error(f"L·ªói Vietnam Targeting: {str(e)}")
        # Fallback content
        st.markdown("""
        <div class="vietnamese-glass">
            <h1>üéØ Vietnam Targeting</h1>
            <p>üöß T√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. Vui l√≤ng quay l·∫°i sau!</p>
            
            <h3>üó∫Ô∏è S·∫Øp c√≥:</h3>
            <ul>
                <li>üèõÔ∏è Targeting Mi·ªÅn B·∫Øc</li>
                <li>üå¥ Targeting Mi·ªÅn Nam</li>
                <li>üèîÔ∏è Targeting Mi·ªÅn Trung</li>
                <li>üé≠ Dialect optimization</li>
                <li>üìä Regional analytics</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

# =============================================================================
# PAGE FUNCTIONS - C·∫≠p nh·∫≠t theo chu·∫©n manguon.txt
# =============================================================================

def home_page():
    """Trang ch·ªß v·ªõi core features"""
    st.markdown("""
        <div class="luxury-card fade-in">
            <h1 style="text-align: center;">üè† VEO3 ULTIMATE - VIETNAMESE EDITION</h1>
            <p style="text-align: center; font-size: 1.2rem;">N·ªÅn t·∫£ng AI t·∫°o video chuy√™n nghi·ªáp cho Vi·ªát Nam</p>
        </div>
    """, unsafe_allow_html=True)
    
    # Core Features Section
    st.subheader("üé¨ T√≠nh nƒÉng C·ªët l√µi")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="metric-card fade-in">
            <h2>üé¨</h2>
            <p>T·∫°o Prompt AI</p>
            <p>Chuy·ªÉn ƒë·ªïi √Ω t∆∞·ªüng th√†nh prompt chuy√™n nghi·ªáp</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="metric-card fade-in">
            <h2>üé≠</h2>
            <p>K·ªãch B·∫£n D√†i</p>
            <p>T·∫°o k·ªãch b·∫£n nhi·ªÅu c·∫£nh cho video d√†i</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="metric-card fade-in">
            <h2>üéØ</h2>
            <p>Tr√¨nh T·∫°o Video</p>
            <p>T·∫°o video v·ªõi VEO 3 API</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.divider()
    
    # Advanced Features Section - CH·ªà 2 T√çNH NƒÇNG
    st.subheader("üöÄ T√≠nh nƒÉng N√¢ng cao")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="luxury-card fade-in">
            <h3 class="text-gradient">ü§ñ AI Assistant Advanced</h3>
            <p>‚Ä¢ Chatbot AI 24/7 ti·∫øng Vi·ªát</p>
            <p>‚Ä¢ Ph√¢n t√≠ch xu h∆∞·ªõng VN</p>
            <p>‚Ä¢ T·ªëi ∆∞u platform TikTok/YouTube</p>
            <p>‚Ä¢ Sentiment analysis</p>
            <p>‚Ä¢ Auto content generation</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="luxury-card fade-in">
            <h3 class="text-gradient">üîß Utility Features</h3>
            <p>‚Ä¢ Video converter multi-platform</p>
            <p>‚Ä¢ AI text & voice generator</p>
            <p>‚Ä¢ Image editing tools</p>
            <p>‚Ä¢ Social media scheduler</p>
            <p>‚Ä¢ Productivity analytics</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.divider()
    
    # Quick stats
    st.subheader("üìä Th·ªëng k√™ VEO3 Ultimate")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üé¨ Videos Created", "1,247", "+156")
    with col2:
        st.metric("ü§ñ AI Features", "5+", "Advanced")
    with col3:
        st.metric("‚ö° Response Time", "0.8s", "Ultra Fast")
    with col4:
        st.metric("üåü User Rating", "4.9/5", "Excellent")

def prompt_generator_tab():
    """Prompt Generator Tab - theo ƒë√∫ng ch·ª©c nƒÉng manguon.txt"""
    st.header("üé¨ T·∫°o Prompt AI")
    
    # Custom styled info box with dark background
    st.markdown("""
    <div style="background: rgba(30, 30, 50, 0.9); color: #FFFFFF; padding: 1.5rem; 
                border-radius: 15px; border: 2px solid rgba(138, 43, 226, 0.3); margin-bottom: 2rem;">
        <h4 style="color: #FFFFFF; margin-bottom: 1rem;">‚ÑπÔ∏è H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</h4>
        <p style="color: #FFFFFF; margin: 0;">
            Nh·∫≠p c√°c m√¥ t·∫£ b·∫±ng ti·∫øng Vi·ªát v√†o c√°c √¥ b√™n d∆∞·ªõi. H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông d·ªãch c√°c ph·∫ßn 
            'Ho√†n c·∫£nh', 'M√¥ t·∫£ nh√¢n v·∫≠t', '√Çm thanh' sang ti·∫øng Anh, gi·ªØ nguy√™n 'L·ªùi tho·∫°i' ti·∫øng Vi·ªát, 
            sau ƒë√≥ t·∫°o prompt cu·ªëi c√πng cho Veo 3. S·ª≠ d·ª•ng c√°c n√∫t ‚ú® ƒë·ªÉ nh·∫≠n g·ª£i √Ω ho·∫∑c m·ªü r·ªông n·ªôi dung.
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Initialize session state
    if 'characters' not in st.session_state:
        st.session_state.characters = [{'name': '', 'description': '', 'voice': '', 'dialogue': ''}]
    if 'current_context' not in st.session_state:
        st.session_state.current_context = {}
    
    # Context input
    st.subheader("üåç Ho√†n c·∫£nh (ti·∫øng Vi·ªát)")
    col1, col2 = st.columns([4, 1])
    with col1:
        context_vi = st.text_area(
            "M√¥ t·∫£ ho√†n c·∫£nh:",
            value=st.session_state.get('context_suggestion', ''),
            placeholder="V√≠ d·ª•: Bu·ªïi s√°ng s∆∞∆°ng s·ªõm, t·∫°i m·ªôt qu√°n c√† ph√™ nh·ªè ven ƒë∆∞·ªùng ·ªü Paris...",
            key="context_vi",
            label_visibility="collapsed"
        )
    with col2:
        if st.button("‚ú® G·ª£i √Ω", key="suggest_context"):
            with st.spinner("ü§ñ ƒêang suy nghƒ© g·ª£i √Ω..."):
                suggestion = suggest_content("context", "ho√†n c·∫£nh", st.session_state.current_context)
                if suggestion:
                    # Show typing effect first
                    st.session_state.show_context_typing = True
                    st.session_state.context_ai_suggestion = suggestion
                    st.rerun()
                else:
                    st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o g·ª£i √Ω l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i.")
    
    # Show typing effect for context suggestion  
    if st.session_state.get('show_context_typing', False):
        st.markdown("**ü§ñ AI ƒëang g√µ g·ª£i √Ω ho√†n c·∫£nh:**")
        
        # Display typing effect
        typing_text = st.session_state.get('context_ai_suggestion', '')
        show_typing_effect(st.empty(), typing_text)
        
        # Buttons to apply or skip
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚úÖ ƒêi·ªÅn v√†o √¥", key="apply_context_typing"):
                st.session_state.context_suggestion = st.session_state.context_ai_suggestion
                st.session_state.show_context_typing = False
                st.session_state.context_ai_suggestion = ""
                st.success("‚úÖ ƒê√£ ƒëi·ªÅn g·ª£i √Ω v√†o √¥ nh·∫≠p li·ªáu!")
                st.rerun()
        
        with col2:
            if st.button("‚ùå B·ªè qua", key="skip_context_typing"):
                st.session_state.show_context_typing = False
                st.session_state.context_ai_suggestion = ""
                st.rerun()
    
    st.session_state.current_context['context'] = context_vi
    
    # Character management
    st.subheader("üë• Qu·∫£n l√Ω Nh√¢n v·∫≠t")
    
    for i, char in enumerate(st.session_state.characters):
        with st.expander(f"Nh√¢n v·∫≠t {i+1}", expanded=True):
            
            # Character Name
            st.write("**T√™n Nh√¢n v·∫≠t (ti·∫øng Vi·ªát):**")
            col1, col2 = st.columns([4, 1])
            with col1:
                char_name = st.text_input(
                    "T√™n:",
                    value=st.session_state.get(f'char_name_suggestion_{i}', char.get('name', '')),
                    placeholder="V√≠ d·ª•: John, Anna, Ng∆∞·ªùi k·ªÉ chuy·ªán...",
                    key=f"char_name_{i}",
                    label_visibility="collapsed"
                )
                st.session_state.characters[i]['name'] = char_name
            with col2:
                if st.button("‚ú®", key=f"suggest_name_{i}"):
                    with st.spinner("ü§ñ ƒêang suy nghƒ© t√™n..."):
                        suggestion = suggest_content("characterName", "t√™n nh√¢n v·∫≠t", st.session_state.current_context)
                        if suggestion:
                            # Update session state directly
                            st.session_state[f'char_name_suggestion_{i}'] = suggestion
                            st.success("‚úÖ ƒê√£ ƒëi·ªÅn t√™n v√†o √¥ nh·∫≠p li·ªáu!")
                            st.rerun()
                        else:
                            st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o g·ª£i √Ω l√∫c n√†y.")
            
            # Show typing effect for character name suggestion
            if st.session_state.get(f'show_name_typing_{i}', False):
                st.markdown(f"**ü§ñ AI ƒëang g·ª£i √Ω t√™n nh√¢n v·∫≠t {i+1}:**")
                typing_container = st.empty()
                
                # Get suggestion if not already generated
                if not st.session_state.get(f'name_ai_suggestion_{i}'):
                    with st.spinner("ƒêang t·∫°o g·ª£i √Ω..."):
                        suggestion = suggest_content("characterName", "t√™n nh√¢n v·∫≠t", st.session_state.current_context)
                        st.session_state[f'name_ai_suggestion_{i}'] = suggestion or "Xin l·ªói, kh√¥ng th·ªÉ t·∫°o g·ª£i √Ω l√∫c n√†y."
                
                # Show typing effect
                show_typing_effect(typing_container, st.session_state[f'name_ai_suggestion_{i}'])
                
                # Button to apply suggestion
                col_apply, col_skip, col_ignore = st.columns(3)
                with col_apply:
                    if st.button("‚úÖ √Åp d·ª•ng", key=f"apply_name_{i}"):
                        st.session_state[f'char_name_suggestion_{i}'] = st.session_state[f'name_ai_suggestion_{i}']
                        st.session_state[f'show_name_typing_{i}'] = False
                        st.session_state[f'name_ai_suggestion_{i}'] = ""
                        st.success("‚úÖ ƒê√£ √°p d·ª•ng t√™n v√†o √¥ nh·∫≠p li·ªáu!")
                        st.rerun()
                
                with col_skip:
                    if st.button("‚ö° ƒêi·ªÅn ngay", key=f"skip_name_typing_{i}"):
                        st.session_state[f'char_name_suggestion_{i}'] = st.session_state[f'name_ai_suggestion_{i}']
                        st.session_state[f'show_name_typing_{i}'] = False
                        st.session_state[f'name_ai_suggestion_{i}'] = ""
                        st.success("‚ö° ƒê√£ ƒëi·ªÅn t√™n v√†o √¥ nh·∫≠p li·ªáu!")
                        st.rerun()
                
                with col_ignore:
                    if st.button("‚ùå B·ªè qua", key=f"ignore_name_{i}"):
                        st.session_state[f'show_name_typing_{i}'] = False
                        st.session_state[f'name_ai_suggestion_{i}'] = ""
                        st.rerun()
            
            # Character Description
            st.write("**M√¥ t·∫£ nh√¢n v·∫≠t (ti·∫øng Vi·ªát):**")
            col1, col2 = st.columns([4, 1])
            with col1:
                char_desc = st.text_area(
                    "M√¥ t·∫£:",
                    value=st.session_state.get(f'char_desc_suggestion_{i}', char.get('description', '')),
                    placeholder="V√≠ d·ª•: M·ªôt ng∆∞·ªùi ph·ª• n·ªØ kho·∫£ng 30 tu·ªïi, v·ªõi m√°i t√≥c n√¢u g·ª£n s√≥ng...",
                    key=f"char_desc_{i}",
                    label_visibility="collapsed"
                )
                st.session_state.characters[i]['description'] = char_desc
            with col2:
                if st.button("‚ú®", key=f"suggest_desc_{i}"):
                    with st.spinner("ü§ñ ƒêang suy nghƒ© m√¥ t·∫£..."):
                        suggestion = suggest_content("character", "m√¥ t·∫£ nh√¢n v·∫≠t", st.session_state.current_context, char_name)
                        if suggestion:
                            # Update session state directly
                            st.session_state[f'char_desc_suggestion_{i}'] = suggestion
                            st.success("‚úÖ ƒê√£ ƒëi·ªÅn m√¥ t·∫£ v√†o √¥ nh·∫≠p li·ªáu!")
                            st.rerun()
                        else:
                            st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o g·ª£i √Ω l√∫c n√†y.")
            
            # Show typing effect for character description suggestion  
            if st.session_state.get(f'show_desc_typing_{i}', False):
                st.markdown(f"**ü§ñ AI ƒëang g·ª£i √Ω m√¥ t·∫£ nh√¢n v·∫≠t {i+1}:**")
                typing_container = st.empty()
                
                # Get suggestion if not already generated
                if not st.session_state.get(f'desc_ai_suggestion_{i}'):
                    with st.spinner("ƒêang t·∫°o g·ª£i √Ω..."):
                        suggestion = suggest_content("character", "m√¥ t·∫£ nh√¢n v·∫≠t", st.session_state.current_context, char_name)
                        st.session_state[f'desc_ai_suggestion_{i}'] = suggestion or "Xin l·ªói, kh√¥ng th·ªÉ t·∫°o g·ª£i √Ω l√∫c n√†y."
                
                # Show typing effect
                show_typing_effect(typing_container, st.session_state[f'desc_ai_suggestion_{i}'])
                
                # Button to apply suggestion
                col_apply, col_skip, col_ignore = st.columns(3)
                with col_apply:
                    if st.button("‚úÖ √Åp d·ª•ng", key=f"apply_desc_{i}"):
                        st.session_state[f'char_desc_suggestion_{i}'] = st.session_state[f'desc_ai_suggestion_{i}']
                        st.session_state[f'show_desc_typing_{i}'] = False
                        st.session_state[f'desc_ai_suggestion_{i}'] = ""
                        st.success("‚úÖ ƒê√£ √°p d·ª•ng m√¥ t·∫£ v√†o √¥ nh·∫≠p li·ªáu!")
                        st.rerun()
                
                with col_skip:
                    if st.button("‚ö° ƒêi·ªÅn ngay", key=f"skip_desc_typing_{i}"):
                        st.session_state[f'char_desc_suggestion_{i}'] = st.session_state[f'desc_ai_suggestion_{i}']
                        st.session_state[f'show_desc_typing_{i}'] = False
                        st.session_state[f'desc_ai_suggestion_{i}'] = ""
                        st.success("‚ö° ƒê√£ ƒëi·ªÅn m√¥ t·∫£ v√†o √¥ nh·∫≠p li·ªáu!")
                        st.rerun()
                
                with col_ignore:
                    if st.button("‚ùå B·ªè qua", key=f"ignore_desc_{i}"):
                        st.session_state[f'show_desc_typing_{i}'] = False
                        st.session_state[f'desc_ai_suggestion_{i}'] = ""
                        st.rerun()
            
            # Voice Description
            st.write("**M√¥ t·∫£ Gi·ªçng n√≥i (ti·∫øng Vi·ªát):**")
            col1, col2 = st.columns([4, 1])
            with col1:
                voice_desc = st.text_area(
                    "Gi·ªçng n√≥i:",
                    value=st.session_state.get(f'voice_suggestion_{i}', char.get('voice', '')),
                    placeholder="V√≠ d·ª•: Gi·ªçng n√≥i nh·ªè nh·∫π, tr·∫ßm t∆∞, h∆°i bu·ªìn b·∫Ω nh∆∞ng ƒë·∫ßy hy v·ªçng...",
                    key=f"voice_desc_{i}",
                    label_visibility="collapsed"
                )
                st.session_state.characters[i]['voice'] = voice_desc
            with col2:
                if st.button("‚ú®", key=f"suggest_voice_{i}"):
                    with st.spinner("ü§ñ ƒêang suy nghƒ© gi·ªçng n√≥i..."):
                        suggestion = suggest_content("voice", "m√¥ t·∫£ gi·ªçng n√≥i", st.session_state.current_context, char_name)
                        if suggestion:
                            # Update session state directly
                            st.session_state[f'voice_suggestion_{i}'] = suggestion
                            st.success("‚úÖ ƒê√£ ƒëi·ªÅn gi·ªçng n√≥i v√†o √¥ nh·∫≠p li·ªáu!")
                            st.rerun()
                        else:
                            st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o g·ª£i √Ω l√∫c n√†y.")
            
            # Show typing effect for voice description suggestion
            if st.session_state.get(f'show_voice_typing_{i}', False):
                st.markdown(f"**ü§ñ AI ƒëang g·ª£i √Ω gi·ªçng n√≥i nh√¢n v·∫≠t {i+1}:**")
                typing_container = st.empty()
                
                # Get suggestion if not already generated
                if not st.session_state.get(f'voice_ai_suggestion_{i}'):
                    with st.spinner("ƒêang t·∫°o g·ª£i √Ω..."):
                        suggestion = suggest_content("voice", "m√¥ t·∫£ gi·ªçng n√≥i", st.session_state.current_context, char_name)
                        st.session_state[f'voice_ai_suggestion_{i}'] = suggestion or "Xin l·ªói, kh√¥ng th·ªÉ t·∫°o g·ª£i √Ω l√∫c n√†y."
                
                # Show typing effect
                show_typing_effect(typing_container, st.session_state[f'voice_ai_suggestion_{i}'])
                
                # Button to apply suggestion
                col_apply, col_skip, col_ignore = st.columns(3)
                with col_apply:
                    if st.button("‚úÖ √Åp d·ª•ng", key=f"apply_voice_{i}"):
                        st.session_state[f'voice_suggestion_{i}'] = st.session_state[f'voice_ai_suggestion_{i}']
                        st.session_state[f'show_voice_typing_{i}'] = False
                        st.session_state[f'voice_ai_suggestion_{i}'] = ""
                        st.success("‚úÖ ƒê√£ √°p d·ª•ng gi·ªçng n√≥i v√†o √¥ nh·∫≠p li·ªáu!")
                        st.rerun()
                
                with col_skip:
                    if st.button("‚ö° ƒêi·ªÅn ngay", key=f"skip_voice_typing_{i}"):
                        st.session_state[f'voice_suggestion_{i}'] = st.session_state[f'voice_ai_suggestion_{i}']
                        st.session_state[f'show_voice_typing_{i}'] = False
                        st.session_state[f'voice_ai_suggestion_{i}'] = ""
                        st.success("‚ö° ƒê√£ ƒëi·ªÅn gi·ªçng n√≥i v√†o √¥ nh·∫≠p li·ªáu!")
                        st.rerun()
                
                with col_ignore:
                    if st.button("‚ùå B·ªè qua", key=f"ignore_voice_{i}"):
                        st.session_state[f'show_voice_typing_{i}'] = False
                        st.session_state[f'voice_ai_suggestion_{i}'] = ""
                        st.rerun()
            
            # Dialogue
            st.write("**L·ªùi tho·∫°i (ti·∫øng Vi·ªát):**")
            col1, col2 = st.columns([4, 1])
            with col1:
                dialogue = st.text_area(
                    "L·ªùi tho·∫°i:",
                    value=st.session_state.get(f'dialogue_expanded_{i}', char.get('dialogue', '')),
                    placeholder="V√≠ d·ª•: Cu·ªôc s·ªëng v·∫´n ti·∫øp di·ªÖn, d√π c√≥ chuy·ªán g√¨ x·∫£y ra ƒëi chƒÉng n·ªØa...",
                    key=f"dialogue_{i}",
                    label_visibility="collapsed"
                )
                st.session_state.characters[i]['dialogue'] = dialogue
            with col2:
                if st.button("‚ú® M·ªü r·ªông", key=f"expand_dialogue_{i}"):
                    st.session_state[f'show_dialogue_typing_{i}'] = True
                    st.session_state[f'dialogue_ai_suggestion_{i}'] = ""
            
            # Show typing effect for dialogue expansion
            if st.session_state.get(f'show_dialogue_typing_{i}', False):
                st.markdown(f"**ü§ñ AI ƒëang m·ªü r·ªông l·ªùi tho·∫°i nh√¢n v·∫≠t {i+1}:**")
                typing_container = st.empty()
                
                # Get suggestion if not already generated
                if not st.session_state.get(f'dialogue_ai_suggestion_{i}'):
                    with st.spinner("ƒêang m·ªü r·ªông..."):
                        expanded = expand_dialogue(dialogue)
                        st.session_state[f'dialogue_ai_suggestion_{i}'] = expanded or "Xin l·ªói, kh√¥ng th·ªÉ m·ªü r·ªông l√∫c n√†y."
                
                # Show typing effect
                show_typing_effect(typing_container, st.session_state[f'dialogue_ai_suggestion_{i}'])
                
                # Button to apply suggestion
                col_apply, col_skip, col_ignore = st.columns(3)
                with col_apply:
                    if st.button("‚úÖ √Åp d·ª•ng", key=f"apply_dialogue_{i}"):
                        st.session_state[f'dialogue_expanded_{i}'] = st.session_state[f'dialogue_ai_suggestion_{i}']
                        st.session_state[f'show_dialogue_typing_{i}'] = False
                        st.session_state[f'dialogue_ai_suggestion_{i}'] = ""
                        st.success("‚úÖ ƒê√£ √°p d·ª•ng l·ªùi tho·∫°i v√†o √¥ nh·∫≠p li·ªáu!")
                        st.rerun()
                
                with col_skip:
                    if st.button("‚ö° ƒêi·ªÅn ngay", key=f"skip_dialogue_typing_{i}"):
                        st.session_state[f'dialogue_expanded_{i}'] = st.session_state[f'dialogue_ai_suggestion_{i}']
                        st.session_state[f'show_dialogue_typing_{i}'] = False
                        st.session_state[f'dialogue_ai_suggestion_{i}'] = ""
                        st.success("‚ö° ƒê√£ ƒëi·ªÅn l·ªùi tho·∫°i v√†o √¥ nh·∫≠p li·ªáu!")
                        st.rerun()
                
                with col_ignore:
                    if st.button("‚ùå B·ªè qua", key=f"ignore_dialogue_{i}"):
                        st.session_state[f'show_dialogue_typing_{i}'] = False
                        st.session_state[f'dialogue_ai_suggestion_{i}'] = ""
                        st.rerun()
            
            # Remove character button
            if len(st.session_state.characters) > 1:
                if st.button(f"üóëÔ∏è X√≥a Nh√¢n v·∫≠t {i+1}", key=f"remove_char_{i}"):
                    st.session_state.characters.pop(i)
                    st.rerun()
    
    # Add character button
    if st.button("‚ûï Th√™m Nh√¢n v·∫≠t", type="secondary"):
        st.session_state.characters.append({'name': '', 'description': '', 'voice': '', 'dialogue': ''})
        st.rerun()
    
    # Sound input
    st.subheader("üîä √Çm thanh (ti·∫øng Vi·ªát)")
    col1, col2 = st.columns([4, 1])
    with col1:
        sound_vi = st.text_area(
            "M√¥ t·∫£ √¢m thanh:",
            value=st.session_state.get('sound_suggestion', ''),
            placeholder="V√≠ d·ª•: Ti·∫øng th√¨ th·∫ßm c·ªßa gi√≥ nh·∫π qua c·ª≠a s·ªï, ti·∫øng chim h√≥t l√≠u lo...",
            key="sound_vi",
            label_visibility="collapsed"
        )
    with col2:
        if st.button("‚ú® G·ª£i √Ω", key="suggest_sound"):
            with st.spinner("ü§ñ ƒêang suy nghƒ© √¢m thanh..."):
                suggestion = suggest_content("sound", "√¢m thanh", st.session_state.current_context)
                if suggestion:
                    # Update session state directly
                    st.session_state.sound_suggestion = suggestion
                    st.success("‚úÖ ƒê√£ ƒëi·ªÅn √¢m thanh v√†o √¥ nh·∫≠p li·ªáu!")
                    st.rerun()
                else:
                    st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o g·ª£i √Ω l√∫c n√†y.")
    
    # Show typing effect for sound suggestion
    if st.session_state.get('show_sound_typing', False):
        st.markdown("**ü§ñ AI ƒëang g·ª£i √Ω √¢m thanh:**")
        typing_container = st.empty()
        
        # Get suggestion if not already generated
        if not st.session_state.get('sound_ai_suggestion'):
            with st.spinner("ƒêang t·∫°o g·ª£i √Ω..."):
                suggestion = suggest_content("sound", "√¢m thanh", st.session_state.current_context)
                st.session_state.sound_ai_suggestion = suggestion or "Xin l·ªói, kh√¥ng th·ªÉ t·∫°o g·ª£i √Ω l√∫c n√†y."
        
        # Show typing effect
        show_typing_effect(typing_container, st.session_state.sound_ai_suggestion)
        
        # Button to apply suggestion
        col_apply, col_skip, col_ignore = st.columns(3)
        with col_apply:
            if st.button("‚úÖ √Åp d·ª•ng", key="apply_sound"):
                st.session_state.sound_suggestion = st.session_state.sound_ai_suggestion
                st.session_state.show_sound_typing = False
                st.session_state.sound_ai_suggestion = ""
                st.success("‚úÖ ƒê√£ √°p d·ª•ng √¢m thanh v√†o √¥ nh·∫≠p li·ªáu!")
                st.rerun()
        
        with col_skip:
            if st.button("‚ö° ƒêi·ªÅn ngay", key="skip_sound_typing"):
                st.session_state.sound_suggestion = st.session_state.sound_ai_suggestion
                st.session_state.show_sound_typing = False
                st.session_state.sound_ai_suggestion = ""
                st.success("‚ö° ƒê√£ ƒëi·ªÅn √¢m thanh v√†o √¥ nh·∫≠p li·ªáu!")
                st.rerun()
        
        with col_ignore:
            if st.button("‚ùå B·ªè qua", key="ignore_sound"):
                st.session_state.show_sound_typing = False
                st.session_state.sound_ai_suggestion = ""
                st.rerun()
    
    st.session_state.current_context['sound'] = sound_vi
    st.session_state.current_context['characters'] = st.session_state.characters
    
    # Generate prompt button
    if st.button("üöÄ T·∫°o v√† D·ªãch Prompt", type="primary"):
        with st.spinner("ƒêang d·ªãch v√† t·∫°o prompt... Vui l√≤ng ch·ªù."):
            final_prompt = generate_final_prompt(context_vi, st.session_state.characters, sound_vi)
            
            if final_prompt:
                st.success("‚úÖ Prompt ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                st.subheader("üìã Prompt ƒê√£ D·ªãch:")
                st.code(final_prompt, language="text")
                
                if st.button("üìã Sao ch√©p Prompt ƒë√£ d·ªãch"):
                    st.session_state.clipboard = final_prompt
                    st.success("ƒê√£ sao ch√©p prompt v√†o clipboard th√†nh c√¥ng!")
            else:
                st.warning("Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt th√¥ng tin ƒë·ªÉ t·∫°o prompt.")

def long_script_tab():
    """Long Video Script Tab - theo ƒë√∫ng ch·ª©c nƒÉng manguon.txt"""
    st.header("üé≠ K·ªãch b·∫£n Clip D√†i")
    
    # Custom styled info box with dark background
    st.markdown("""
    <div style="background: rgba(30, 30, 50, 0.9); color: #FFFFFF; padding: 1.5rem; 
                border-radius: 15px; border: 2px solid rgba(138, 43, 226, 0.3); margin-bottom: 2rem;">
        <h4 style="color: #FFFFFF; margin-bottom: 1rem;">‚ÑπÔ∏è H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</h4>
        <p style="color: #FFFFFF; margin: 0;">
            Nh·∫≠p √Ω t∆∞·ªüng t·ªïng th·ªÉ v·ªÅ clip d√†i c·ªßa b·∫°n (b·∫±ng ti·∫øng Vi·ªát). 
            ·ª®ng d·ª•ng s·∫Ω gi√∫p b·∫°n t·∫°o m·ªôt k·ªãch b·∫£n nh√°p v·ªõi c√°c ph√¢n c·∫£nh.
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Script idea input v·ªõi n√∫t g·ª£i √Ω
    st.subheader("üí° √ù t∆∞·ªüng Clip D√†i")
    col1, col2 = st.columns([4, 1])
    
    with col1:
        script_idea = st.text_area(
            "√ù t∆∞·ªüng Clip D√†i (ti·∫øng Vi·ªát):",
            value=st.session_state.get('script_idea_suggestion', ''),
            placeholder="V√≠ d·ª•: M·ªôt c√¥ g√°i ƒëi b·ªô qua c√°c m√πa trong nƒÉm, t·ª´ m√πa xu√¢n t∆∞∆°i m·ªõi ƒë·∫øn m√πa ƒë√¥ng l·∫°nh gi√°, v·ªõi c·∫£m x√∫c thay ƒë·ªïi theo t·ª´ng c·∫£nh.",
            height=100,
            key="script_idea",
            label_visibility="collapsed"
        )
    
    with col2:
        if st.button("‚ú® G·ª£i √Ω", key="suggest_script_idea"):
            with st.spinner("ü§ñ ƒêang suy nghƒ© √Ω t∆∞·ªüng hay..."):
                idea_prompt = """G·ª£i √Ω m·ªôt √Ω t∆∞·ªüng k·ªãch b·∫£n video d√†i s√°ng t·∫°o v√† h·∫•p d·∫´n b·∫±ng ti·∫øng Vi·ªát. 
                √ù t∆∞·ªüng n√™n c√≥ c·ªët truy·ªán r√µ r√†ng, c·∫£m x√∫c ƒëa d·∫°ng, v√† ph√π h·ª£p ƒë·ªÉ t·∫°o th√†nh nhi·ªÅu c·∫£nh. 
                Ch·ªâ tr·∫£ l·ªùi b·∫±ng √Ω t∆∞·ªüng, kh√¥ng th√™m gi·∫£i th√≠ch hay ti√™u ƒë·ªÅ."""
                
                suggestion = call_gemini_api(idea_prompt)
                if suggestion:
                    # Show typing effect first
                    st.session_state.show_script_typing = True
                    st.session_state.script_ai_suggestion = suggestion
                    st.rerun()
                else:
                    st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o g·ª£i √Ω l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i.")
    
    # Show typing effect for script idea suggestion
    if st.session_state.get('show_script_typing', False):
        st.markdown("**ü§ñ AI ƒëang g√µ √Ω t∆∞·ªüng k·ªãch b·∫£n:**")
        
        # Display typing effect
        typing_text = st.session_state.get('script_ai_suggestion', '')
        show_typing_effect(st.empty(), typing_text)
        
        # Buttons to apply or skip
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚úÖ ƒêi·ªÅn v√†o √¥", key="apply_script_typing"):
                st.session_state.script_idea_suggestion = st.session_state.script_ai_suggestion
                st.session_state.show_script_typing = False
                st.session_state.script_ai_suggestion = ""
                st.success("‚úÖ ƒê√£ ƒëi·ªÅn √Ω t∆∞·ªüng v√†o √¥ nh·∫≠p li·ªáu!")
                st.rerun()
        
        with col2:
            if st.button("‚ùå B·ªè qua", key="skip_script_typing"):
                st.session_state.show_script_typing = False
                st.session_state.script_ai_suggestion = ""
                st.rerun()
    
    # Generate script button
    if st.button("üé¨ T·∫°o K·ªãch b·∫£n Nh√°p", type="primary"):
        if script_idea.strip():
            with st.spinner("ƒêang t·∫°o k·ªãch b·∫£n nh√°p... Vui l√≤ng ch·ªù."):
                script = generate_long_script(script_idea)
                if script:
                    st.session_state.generated_script = script
                    st.success("‚úÖ K·ªãch b·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o!")
                else:
                    st.error("ƒê√£ x·∫£y ra l·ªói khi t·∫°o k·ªãch b·∫£n. Vui l√≤ng th·ª≠ l·∫°i.")
        else:
            st.warning("Vui l√≤ng nh·∫≠p √Ω t∆∞·ªüng clip d√†i ƒë·ªÉ t·∫°o k·ªãch b·∫£n.")
    
    # Display and edit script
    if 'generated_script' in st.session_state:
        st.subheader("üìù K·ªãch b·∫£n Nh√°p:")
        
        # Show script in code block
        st.code(st.session_state.generated_script, language="text")
        
        # Edit mode
        with st.expander("‚úèÔ∏è Ch·ªânh s·ª≠a k·ªãch b·∫£n", expanded=False):
            edited_script = st.text_area(
                "Ch·ªânh s·ª≠a k·ªãch b·∫£n t·∫°i ƒë√¢y:",
                value=st.session_state.generated_script,
                height=300
            )
            if st.button("üíæ L∆∞u ch·ªânh s·ª≠a"):
                st.session_state.generated_script = edited_script
                st.success("ƒê√£ l∆∞u ch·ªânh s·ª≠a!")
                st.rerun()
        
        # Convert to prompts
        if st.button("üîÑ Chuy·ªÉn ƒë·ªïi K·ªãch b·∫£n sang Prompt Veo 3", type="secondary"):
            with st.spinner("ƒêang chuy·ªÉn ƒë·ªïi k·ªãch b·∫£n... Vui l√≤ng ch·ªù."):
                scenes = convert_script_to_prompts(st.session_state.generated_script)
                if scenes:
                    st.session_state.converted_scenes = scenes
                    st.success(f"‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi th√†nh {len(scenes)} prompt!")
                else:
                    st.error("ƒê√£ x·∫£y ra l·ªói khi chuy·ªÉn ƒë·ªïi. Vui l√≤ng th·ª≠ l·∫°i.")
    
    # Display converted prompts
    if 'converted_scenes' in st.session_state:
        st.subheader("üéØ Prompt Veo 3:")
        
        for i, scene in enumerate(st.session_state.converted_scenes):
            with st.expander(f"C·∫£nh {scene['scene_number']}", expanded=True):
                st.code(scene['prompt'], language="text")
                
                col1, col2 = st.columns(2)
                with col1:
                    if st.button(f"üìã Sao ch√©p Prompt n√†y", key=f"copy_scene_{i}"):
                        st.session_state.clipboard = scene['prompt']
                        st.success(f"ƒê√£ sao ch√©p prompt c·∫£nh {scene['scene_number']}!")
                
                with col2:
                    # Link to Veo 3
                    st.markdown(f"[üöÄ T·∫°o video v·ªõi Veo 3](https://labs.google/fx/vi/tools/flow/)")
    
    # Contact info for assistance
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; padding: 1rem; background-color: rgba(30, 144, 255, 0.1); border-radius: 1rem; margin-top: 1rem;">
        <p style="color: #1e90ff; font-weight: 500;">üí° <strong>H∆∞·ªõng d·∫´n:</strong> Sau khi c√≥ prompt, truy c·∫≠p <a href="https://labs.google/fx/vi/tools/flow/" target="_blank" style="color: #4169e1;">Veo 3 Labs</a> ƒë·ªÉ t·∫°o video</p>
    </div>
    
    """, unsafe_allow_html=True)

def video_generator_page():
    """Trang t·∫°o video VEO3"""
    st.markdown("""
        <div class="vietnamese-glass">
            <h1 style="color: #ffffff;">üéØ Tr√¨nh T·∫°o Video VEO3</h1>
            <p style="color: #ffffff;">T·∫°o video AI chuy√™n nghi·ªáp v·ªõi VEO 3</p>
        </div>
    
    """, unsafe_allow_html=True)
    
    # Quick prompt templates
    st.subheader("‚ö° M·∫´u Prompt Nhanh")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üåÖ Phong c·∫£nh thi√™n nhi√™n"):
            st.session_state.video_prompt = "A serene mountain landscape at sunrise with golden light reflecting on a peaceful lake, gentle mist rising from the water, birds flying in the distance."
    
    with col2:
        if st.button("üèÉ‚Äç‚ôÇÔ∏è Chuy·ªÉn ƒë·ªông ng∆∞·ªùi"):
            st.session_state.video_prompt = "A young person jogging through a park in the morning, wearing athletic clothes, with trees and flowers in the background, smooth camera tracking movement."
    
    with col3:
        if st.button("üé® Ngh·ªá thu·∫≠t tr·ª´u t∆∞·ª£ng"):
            st.session_state.video_prompt = "Abstract flowing colors and shapes morphing and transforming, like liquid paint in zero gravity, vibrant purple, blue and gold tones."
    
    # Main prompt input
    st.subheader("‚úçÔ∏è T·∫°o Prompt Video")
    
    video_prompt = st.text_area(
        "üìù M√¥ t·∫£ video c·ªßa b·∫°n (ti·∫øng Anh):",
        value=st.session_state.get('video_prompt', ''),
        height=150,
        placeholder="Describe your video scene in English. Be specific about setting, characters, actions, and visual style...",
        key="video_prompt_input"
    )
    
    # Update session state
    if video_prompt:
        st.session_state.video_prompt = video_prompt
    
    # Video settings
    st.subheader("‚öôÔ∏è C√†i ƒê·∫∑t Video")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        duration = st.slider("‚è±Ô∏è Th·ªùi l∆∞·ª£ng (gi√¢y)", 3, 10, 5)
        aspect_ratio = st.selectbox(
            "üìê T·ª∑ l·ªá khung h√¨nh",
            ["16:9 (Ngang)", "9:16 (D·ªçc)", "1:1 (Vu√¥ng)"]
        )
    
    with col2:
        quality = st.selectbox(
            "üì∫ Ch·∫•t l∆∞·ª£ng",
            ["1080p HD", "720p", "480p"]
        )
        style = st.selectbox(
            "üé® Phong c√°ch",
            ["Realistic", "Cinematic", "Artistic", "Documentary"]
        )
    
    with col3:
        motion_strength = st.slider("üåä ƒê·ªô chuy·ªÉn ƒë·ªông", 1, 10, 5)
        seed = st.number_input("üé≤ Seed (t√πy ch·ªçn)", value=0, help="ƒê·ªÉ 0 cho ng·∫´u nhi√™n")
    
    # Enhanced prompt with settings
    if video_prompt:
        enhanced_prompt = f"{video_prompt}. Style: {style.lower()}, duration: {duration}s, aspect ratio: {aspect_ratio.split()[0]}, motion level: {motion_strength}/10"
        
        with st.expander("üëÄ Xem prompt ƒë√£ t·ªëi ∆∞u", expanded=False):
            st.code(enhanced_prompt, language="text")
    
    # Generate video button
    st.subheader("üöÄ T·∫°o Video")
    
    if st.button("üé¨ T·∫°o Video VEO3", type="primary", disabled=not video_prompt):
        if not video_prompt.strip():
            st.error("‚ùå Vui l√≤ng nh·∫≠p m√¥ t·∫£ video!")
            return
        
        with st.spinner("üé® VEO3 ƒëang t·∫°o video si√™u ƒë·∫πp cho b·∫°n..."):
            # Progress simulation
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            stages = [
                "üß† AI ƒëang ph√¢n t√≠ch prompt...",
                "üé® ƒêang t·∫°o khung h√¨nh ƒë·∫ßu ti√™n...",
                "üé¨ ƒêang render c√°c frame...",
                "‚ú® ƒêang th√™m hi·ªáu ·ª©ng chuy·ªÉn ƒë·ªông...",
                "üéµ ƒêang ƒë·ªìng b·ªô h√≥a...",
                "üåü ƒêang ho√†n thi·ªán video..."
            ]
            
            for i, stage in enumerate(stages):
                status_text.text(stage)
                progress = int((i + 1) * 100 / len(stages))
                progress_bar.progress(progress)
                time.sleep(1.5)
            
            # Simulate API call
            video_result = call_veo3_api(enhanced_prompt)
            
            if video_result["status"] == "success":
                st.success("üéâ Video ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                
                # Display video info
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.subheader("üìπ Video ƒë√£ t·∫°o")
                    # For demo, show a placeholder video
                    st.video("https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4")
                    
                    st.info(f"üÜî Video ID: {video_result['video_id']}")
                    st.info(f"‚è±Ô∏è Th·ªùi l∆∞·ª£ng: {video_result['duration']} gi√¢y")
                    st.info(f"üì∫ ƒê·ªô ph√¢n gi·∫£i: {video_result['resolution']}")
                
                with col2:
                    st.subheader("üì• T·∫£i xu·ªëng")
                    
                    if st.button("üì• T·∫£i Video MP4"):
                        st.success("üîÑ ƒêang chu·∫©n b·ªã t·∫£i xu·ªëng...")
                    
                    if st.button("üñºÔ∏è T·∫£i Thumbnail"):
                        st.success("üîÑ ƒêang chu·∫©n b·ªã thumbnail...")
                    
                    if st.button("üì§ Chia s·∫ª"):
                        st.success("üîó Link chia s·∫ª ƒë√£ ƒë∆∞·ª£c t·∫°o!")
                
                # Save to history
                if 'video_history' not in st.session_state:
                    st.session_state.video_history = []
                
                st.session_state.video_history.append({
                    "prompt": video_prompt,
                    "video_id": video_result['video_id'],
                    "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "settings": {
                        "duration": duration,
                        "quality": quality,
                        "style": style,
                        "aspect_ratio": aspect_ratio
                    }
                })
            else:
                st.error("‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o video. Vui l√≤ng th·ª≠ l·∫°i!")
    
    # Video history
    if 'video_history' in st.session_state and st.session_state.video_history:
        st.subheader("üìö L·ªãch s·ª≠ Video")
        
        with st.expander("üï∞Ô∏è Xem l·ªãch s·ª≠ t·∫°o video", expanded=False):
            for i, video in enumerate(reversed(st.session_state.video_history[-5:]), 1):
                st.markdown(f"**Video #{i}** - {video['created_at']}")
                st.text(f"Prompt: {video['prompt'][:100]}...")
                st.text(f"ID: {video['video_id']}")
                st.divider()

def video_library_page():
    """Th∆∞ vi·ªán video"""
    st.markdown("""
        <div class="vietnamese-glass">
            <h1 style="color: #ffffff;">üìö Th∆∞ Vi·ªán Video</h1>
            <p style="color: #ffffff;">üöß T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn...</p>
        </div>
    
    """, unsafe_allow_html=True)

def analytics_page():
    """Th·ªëng k√™"""
    st.markdown("""
        <div class="vietnamese-glass">
            <h1 style="color: #ffffff;">üìä Th·ªëng K√™</h1>
            <p style="color: #ffffff;">üöß T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn...</p>
        </div>
    
    """, unsafe_allow_html=True)

def premium_page():
    """N√¢ng c·∫•p VIP"""
    st.markdown("""
        <div class="vietnamese-glass">
            <h1 style="color: #ffffff;">üëë N√¢ng C·∫•p VIP</h1>
            <p style="color: #ffffff;">üöß T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn...</p>
        </div>
    
    """, unsafe_allow_html=True)

def settings_page():
    """C√†i ƒë·∫∑t v√† th√¥ng tin li√™n h·ªá - theo manguon.txt"""
    st.markdown("""
        <div class="vietnamese-glass">
            <h1>‚öôÔ∏è C·∫•u H√¨nh & Th√¥ng Tin</h1>
            <p>Qu·∫£n l√Ω API keys v√† th√¥ng tin li√™n h·ªá</p>
        </div>
    
    """, unsafe_allow_html=True)
    
    # API Management Section
    st.subheader("üîë Qu·∫£n L√Ω API Keys")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Info box with dark styling
        st.markdown("""
        <div style="background: rgba(30, 30, 50, 0.9); color: #FFFFFF; padding: 1.5rem; 
                    border-radius: 15px; border: 2px solid rgba(70, 130, 180, 0.3); margin-bottom: 1rem;">
            <p style="color: #87CEEB; margin: 0; font-weight: 500;">
                üí° B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng API key m·∫∑c ƒë·ªãnh ho·∫∑c nh·∫≠p API key ri√™ng c·ªßa m√¨nh
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Current API status
        current_key = get_current_api_key()
        if current_key in DEFAULT_API_KEYS:
            key_index = DEFAULT_API_KEYS.index(current_key) + 1
            st.markdown(f"""
            <div style="background: rgba(40, 80, 40, 0.9); color: #FFFFFF; padding: 1rem; 
                        border-radius: 15px; border: 2px solid rgba(50, 205, 50, 0.3); margin-bottom: 1rem;">
                <p style="color: #90EE90; margin: 0; font-weight: 600;">
                    ‚úÖ ƒêang s·ª≠ d·ª•ng API key m·∫∑c ƒë·ªãnh #{key_index}
                </p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div style="background: rgba(40, 80, 40, 0.9); color: #FFFFFF; padding: 1rem; 
                        border-radius: 15px; border: 2px solid rgba(50, 205, 50, 0.3); margin-bottom: 1rem;">
                <p style="color: #90EE90; margin: 0; font-weight: 600;">
                    ‚úÖ ƒêang s·ª≠ d·ª•ng API key t√πy ch·ªânh
                </p>
            </div>
            """, unsafe_allow_html=True)
        
        # Custom API key input
        custom_api_key = st.text_input(
            "üîê Nh·∫≠p API Key Gemini c·ªßa b·∫°n:",
            value=st.session_state.get('custom_api_key', ''),
            type="password",
            placeholder="AIzaSy...",
            help="L·∫•y API key t·ª´: https://aistudio.google.com/app/apikey"
        )
        
        col_a, col_b, col_c = st.columns(3)
        
        with col_a:
            if st.button("üíæ L∆∞u API Key"):
                if custom_api_key.strip():
                    st.session_state.custom_api_key = custom_api_key.strip()
                    st.markdown("""
                    <div style="background: rgba(40, 80, 40, 0.9); color: #FFFFFF; padding: 1rem; 
                                border-radius: 15px; border: 2px solid rgba(50, 205, 50, 0.3); margin: 1rem 0;">
                        <p style="color: #90EE90; margin: 0; font-weight: 600;">
                            ‚úÖ ƒê√£ l∆∞u API key th√†nh c√¥ng!
                        </p>
                    </div>
                    """, unsafe_allow_html=True)
                    st.rerun()
                else:
                    st.markdown("""
                    <div style="background: rgba(80, 30, 30, 0.9); color: #FFFFFF; padding: 1rem; 
                                border-radius: 15px; border: 2px solid rgba(220, 20, 60, 0.3); margin: 1rem 0;">
                        <p style="color: #FFB6C1; margin: 0; font-weight: 600;">
                            ‚ùå Vui l√≤ng nh·∫≠p API key h·ª£p l·ªá
                        </p>
                    </div>
                    """, unsafe_allow_html=True)
        
        with col_b:
            if st.button("üîÑ S·ª≠ d·ª•ng API m·∫∑c ƒë·ªãnh"):
                st.session_state.custom_api_key = ""
                st.markdown("""
                <div style="background: rgba(40, 80, 40, 0.9); color: #FFFFFF; padding: 1rem; 
                            border-radius: 15px; border: 2px solid rgba(50, 205, 50, 0.3); margin: 1rem 0;">
                    <p style="color: #90EE90; margin: 0; font-weight: 600;">
                        ‚úÖ ƒê√£ chuy·ªÉn v·ªÅ API key m·∫∑c ƒë·ªãnh!
                    </p>
                </div>
                """, unsafe_allow_html=True)
                st.rerun()
        
        with col_c:
            if st.button("üß™ Test API"):
                with st.spinner("ƒêang ki·ªÉm tra API..."):
                    test_result = call_gemini_api("Hello, please respond with 'API working'")
                    if test_result:
                        st.markdown(f"""
                        <div style="background: rgba(40, 80, 40, 0.9); color: #FFFFFF; padding: 1rem; 
                                    border-radius: 15px; border: 2px solid rgba(50, 205, 50, 0.3); margin: 1rem 0;">
                            <p style="color: #90EE90; margin: 0; font-weight: 600;">
                                ‚úÖ API ho·∫°t ƒë·ªông t·ªët: {test_result}
                            </p>
                        </div>
                        """, unsafe_allow_html=True)
                    else:
                        st.markdown("""
                        <div style="background: rgba(80, 30, 30, 0.9); color: #FFFFFF; padding: 1rem; 
                                    border-radius: 15px; border: 2px solid rgba(220, 20, 60, 0.3); margin: 1rem 0;">
                            <p style="color: #FFB6C1; margin: 0; font-weight: 600;">
                                ‚ùå API kh√¥ng ho·∫°t ƒë·ªông
                            </p>
                        </div>
                        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="vietnamese-metric">
            <h2>üöÄ</h2>
            <p>API Status</p>
            <p>S·∫µn s√†ng ho·∫°t ƒë·ªông</p>
        </div>
        
    """, unsafe_allow_html=True)
    


# =============================================================================
# =============================================================================
# MAIN APPLICATION - C·∫≠p nh·∫≠t routing
# =============================================================================

def main():
    """·ª®ng d·ª•ng ch√≠nh"""
    # ===== LOADING STATE MANAGEMENT =====
    if 'app_initialized' not in st.session_state:
        st.session_state.app_initialized = False
    
    # Show loading screen on first load
    if not st.session_state.app_initialized:
        st.markdown("""
        <div style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; 
                    background: linear-gradient(135deg, #667eea, #764ba2, #f093fb); 
                    z-index: 9999; display: flex; align-items: center; justify-content: center;">
            <div style="text-align: center; color: white;">
                <div style="border: 4px solid rgba(255,255,255,0.3); border-top: 4px solid white; 
                           border-radius: 50%; width: 50px; height: 50px; animation: spin 1s linear infinite; margin: 0 auto 20px;"></div>
                <h2 style="color: white; margin: 0;">üé¨ VEO3 ULTIMATE</h2>
                <p style="color: rgba(255,255,255,0.8); margin: 10px 0 0 0;">ƒêang t·∫£i giao di·ªán...</p>
            </div>
            <style>
            @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
            </style>
        </div>
        """, unsafe_allow_html=True)
        
        # Simulate loading time and initialize
        import time
        time.sleep(1.5)
        st.session_state.app_initialized = True
        st.rerun()
    
    # Load CSS first for smooth experience
    load_vietnamese_css()
    
    # Additional CSS fix for text color (keep existing)
    st.markdown("""
    <style>
    /* Fast loading optimizations */
    .stMarkdown, .stMarkdown *, .stText, .stText *, p, div, span, h1, h2, h3, h4, h5, h6, li {
        color: #FFFFFF !important;
        transition: color 0.1s ease !important;
    }
    [data-testid="stMarkdownContainer"], [data-testid="stMarkdownContainer"] * {
        color: #FFFFFF !important;
        transition: color 0.1s ease !important;
    }
    .stAlert > div {
        color: #000000 !important;
        background: rgba(255, 255, 255, 0.95) !important;
        transition: all 0.1s ease !important;
    }
    
    /* Prevent layout shift */
    .main {
        min-height: 100vh !important;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Header with smooth fade-in
    st.markdown("""
        <div class="hero-header fade-in">
            <h1>üé¨ VEO 3 ULTIMATE</h1>
            <p>‚ú® VIETNAMESE EDITION - Luxury AI Video Creator ‚ú®</p>
        </div>
    """, unsafe_allow_html=True)
    
    # Navigation with optimized loading
    st.markdown("""
        <div class="nav-container">
            <div class="nav-title">üß≠ Ch·ªçn ch·ª©c nƒÉng y√™u th√≠ch</div>
        </div>
    """, unsafe_allow_html=True)
    
    # Create button navigation instead of selectbox
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üè† Trang Ch·ªß", key="nav_home", type="secondary"):
            st.session_state.current_page = "home"
        if st.button("üé¨ T·∫°o Prompt AI", key="nav_prompt", type="secondary"):
            st.session_state.current_page = "prompt"
    
    with col2:
        if st.button("üé≠ K·ªãch B·∫£n Clip D√†i", key="nav_script", type="secondary"):
            st.session_state.current_page = "script"
        if st.button("üéØ Tr√¨nh T·∫°o Video", key="nav_video", type="secondary"):
            st.session_state.current_page = "video"
    
    with col3:
        if st.button("ü§ñ AI Assistant", key="nav_ai", type="secondary"):
            st.session_state.current_page = "ai_assistant"
        if st.button("üîß Utility Features", key="nav_utility", type="secondary"):
            st.session_state.current_page = "utility"
    
    with col4:
        if st.button("üìä Th·ªëng K√™", key="nav_stats", type="secondary"):
            st.session_state.current_page = "stats"
        if st.button("‚öôÔ∏è C·∫•u H√¨nh", key="nav_settings", type="secondary"):
            st.session_state.current_page = "settings"
    
    # Initialize current page if not set
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "home"
    
    st.divider()
    
    # Page routing based on button clicks
    current_page = st.session_state.current_page
    
    if current_page == "home":
        home_page()
    elif current_page == "prompt":
        prompt_generator_tab()
    elif current_page == "script":
        long_script_tab()
    elif current_page == "video":
        video_generator_page()
    elif current_page == "ai_assistant":
        ai_assistant_page()
    elif current_page == "utility":
        utility_page()
    elif current_page == "stats":
        analytics_page()
    elif current_page == "settings":
        settings_page()

if __name__ == "__main__":
    main()